diff --git a/tskit/core.c b/tskit/core.c
index 78a01de..f6e70f4 100644
--- a/tskit/core.c
+++ b/tskit/core.c
@@ -1231,21 +1231,35 @@ tsk_id_in_array(tsk_bit_array_t *a, const tsk_id_t node)
     return tsk_bit_in_array(a, (tsk_bit_array_t) node);
 }
 
+static inline int
+popcountll(const uint64_t *buf, tsk_size_t n)
+{
+    int cnt = 0;
+    tsk_size_t i;
+    for (i = 0; i < n - n % 4; i += 4) {
+        cnt += (__builtin_popcountll(buf[i + 0]) + __builtin_popcountll(buf[i + 1]))
+               + (__builtin_popcountll(buf[i + 2]) + __builtin_popcountll(buf[i + 3]));
+    }
+    for (; i < n; i++) {
+        cnt += __builtin_popcountll(buf[i]);
+    }
+    return cnt;
+}
+
 void
 tsk_count_bit_array(const tsk_bit_array_t *a, const tsk_size_t len, tsk_size_t *c)
 {
-    /* Utilizes one iteration per set bit. There are implementations that use 15
-     * operations for 32 bit integers, see
-     * https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSet64
-     * However, this implementation might be more efficient across many architectures.
-     */
+#ifdef __POPCNT__
+    *c = (tsk_size_t) popcountll(a, len);
+#else
+    /* Utilizes 12 operations per bit array. NB this only works on 32 bit integers.
+     * Taken from: https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSet64 */
     tsk_bit_array_t tmp;
     *c = 0;
     for (tsk_size_t i = 0; i < len; i++) {
-        tmp = a[i];
-        while (tmp) {
-            tmp &= (tmp - 1);
-            *c += 1;
-        }
+        tmp = a[i] - ((a[i] >> 1) & 0x55555555);
+        tmp = (tmp & 0x33333333) + ((tmp >> 2) & 0x33333333);
+        *c += (((tmp + (tmp >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
     }
+#endif
 }
diff --git a/tskit/core.h b/tskit/core.h
index d823b58..c417510 100644
--- a/tskit/core.h
+++ b/tskit/core.h
@@ -1010,9 +1010,14 @@ void tsk_set_debug_stream(FILE *f);
 FILE *tsk_get_debug_stream(void);
 
 /* Bit Array functionality */
-
+#ifdef __POPCNT__ // set if -mpopcnt is set
+typedef uint64_t tsk_bit_array_t;
+#define TSK_BIT_ARRAY_CHUNK ((tsk_bit_array_t) 6)
+#else
 typedef uint32_t tsk_bit_array_t;
 #define TSK_BIT_ARRAY_CHUNK ((tsk_bit_array_t) 5)
+#endif
+
 #define TSK_BIT_ARRAY_NUM_BITS ((tsk_bit_array_t) 1 << TSK_BIT_ARRAY_CHUNK)
 #define TSK_BIT_ARRAY_NUM_CHUNKS(n)                                                     \
     (((n) >> TSK_BIT_ARRAY_CHUNK) + (((n) % TSK_BIT_ARRAY_NUM_BITS) ? 1 : 0))
diff --git a/meson.build b/meson.build
index b93059d..a3a42b6 100644
--- a/meson.build
+++ b/meson.build
@@ -16,7 +16,7 @@ extra_c_args = [
     '-Wmissing-prototypes',  '-Wstrict-prototypes',
     '-Wconversion', '-Wshadow', '-Wpointer-arith', '-Wcast-align',
     '-Wcast-qual', '-Wwrite-strings', '-Wnested-externs',
-    '-fshort-enums', '-fno-common']
+    '-fshort-enums', '-fno-common', '-mpopcnt']
 
 lib_sources = [
     'tskit/core.c', 'tskit/tables.c', 'tskit/trees.c',
@@ -28,7 +28,7 @@ lib_headers = [
 # Subprojects use the static library for simplicity.
 tskit_inc = [kastore_inc, include_directories(['.'])]
 tskit_lib = static_library('tskit',
-    sources: lib_sources, dependencies: lib_deps)
+    sources: lib_sources, dependencies: lib_deps, c_args: extra_c_args)
 tskit_dep = declare_dependency(include_directories:tskit_inc, link_with: tskit_lib)
 
 if not meson.is_subproject()
