diff --git a/tests/test_stats.c b/tests/test_stats.c
index 3599128..3fbbb31 100644
--- a/tests/test_stats.c
+++ b/tests/test_stats.c
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2022 Tskit Developers
+ * Copyright (c) 2019-2023 Tskit Developers
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -262,6 +262,48 @@ verify_mean_descendants(tsk_treeseq_t *ts)
     free(C);
 }
 
+/* Check the divergence matrix by running against the stats API equivalent
+ * code. NOTE: this will not always be equal in site mode, because of a slightly
+ * different definition wrt to multiple mutations at a site.
+ */
+static void
+verify_divergence_matrix(tsk_treeseq_t *ts, tsk_flags_t mode)
+{
+    int ret;
+    const tsk_size_t n = tsk_treeseq_get_num_samples(ts);
+    const tsk_id_t *samples = tsk_treeseq_get_samples(ts);
+    tsk_size_t sample_set_sizes[n];
+    tsk_id_t index_tuples[2 * n * n];
+    double D1[n * n], D2[n * n];
+    tsk_size_t i, j, k;
+
+    for (j = 0; j < n; j++) {
+        sample_set_sizes[j] = 1;
+        for (k = 0; k < n; k++) {
+            index_tuples[2 * (j * n + k)] = (tsk_id_t) j;
+            index_tuples[2 * (j * n + k) + 1] = (tsk_id_t) k;
+        }
+    }
+    ret = tsk_treeseq_divergence(
+        ts, n, sample_set_sizes, samples, n * n, index_tuples, 0, NULL, mode, D1);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+
+    ret = tsk_treeseq_divergence_matrix(ts, 0, NULL, 0, NULL, mode, D2);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+
+    for (j = 0; j < n; j++) {
+        for (k = 0; k < n; k++) {
+            i = j * n + k;
+            /* printf("%d\t%d\t%f\t%f\n", (int) j, (int) k, D1[i], D2[i]); */
+            if (j == k) {
+                CU_ASSERT_EQUAL(D2[i], 0);
+            } else {
+                CU_ASSERT_DOUBLE_EQUAL(D1[i], D2[i], 1E-6);
+            }
+        }
+    }
+}
+
 typedef struct {
     int call_count;
     int error_on;
@@ -303,6 +345,16 @@ verify_window_errors(tsk_treeseq_t *ts, tsk_flags_t mode)
         ts, 1, W, 1, general_stat_error, NULL, 2, windows, options, sigma);
     CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
 
+    windows[0] = -1;
+    ret = tsk_treeseq_general_stat(
+        ts, 1, W, 1, general_stat_error, NULL, 2, windows, options, sigma);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
+
+    windows[1] = -1;
+    ret = tsk_treeseq_general_stat(
+        ts, 1, W, 1, general_stat_error, NULL, 1, windows, options, sigma);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
+
     windows[0] = 10;
     ret = tsk_treeseq_general_stat(
         ts, 1, W, 1, general_stat_error, NULL, 2, windows, options, sigma);
@@ -396,11 +448,10 @@ verify_node_general_stat_errors(tsk_treeseq_t *ts)
 static void
 verify_one_way_weighted_func_errors(tsk_treeseq_t *ts, one_way_weighted_method *method)
 {
-    // we don't have any specific errors for this function
-    // but we might add some in the future
     int ret;
     tsk_size_t num_samples = tsk_treeseq_get_num_samples(ts);
     double *weights = tsk_malloc(num_samples * sizeof(double));
+    double bad_windows[] = { 0, -1 };
     double result;
     tsk_size_t j;
 
@@ -409,7 +460,10 @@ verify_one_way_weighted_func_errors(tsk_treeseq_t *ts, one_way_weighted_method *
     }
 
     ret = method(ts, 0, weights, 0, NULL, 0, &result);
-    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_STATE_DIMS);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_INSUFFICIENT_WEIGHTS);
+
+    ret = method(ts, 1, weights, 1, bad_windows, 0, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
 
     free(weights);
 }
@@ -418,12 +472,11 @@ static void
 verify_one_way_weighted_covariate_func_errors(
     tsk_treeseq_t *ts, one_way_covariates_method *method)
 {
-    // we don't have any specific errors for this function
-    // but we might add some in the future
     int ret;
     tsk_size_t num_samples = tsk_treeseq_get_num_samples(ts);
     double *weights = tsk_malloc(num_samples * sizeof(double));
     double *covariates = NULL;
+    double bad_windows[] = { 0, -1 };
     double result;
     tsk_size_t j;
 
@@ -432,7 +485,10 @@ verify_one_way_weighted_covariate_func_errors(
     }
 
     ret = method(ts, 0, weights, 0, covariates, 0, NULL, 0, &result);
-    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_STATE_DIMS);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_INSUFFICIENT_WEIGHTS);
+
+    ret = method(ts, 1, weights, 0, covariates, 1, bad_windows, 0, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
 
     free(weights);
 }
@@ -516,6 +572,28 @@ verify_two_way_stat_func_errors(tsk_treeseq_t *ts, general_sample_stat_method *m
     CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_SAMPLE_SET_INDEX);
 }
 
+static void
+verify_two_way_weighted_stat_func_errors(
+    tsk_treeseq_t *ts, two_way_weighted_method *method)
+{
+    int ret;
+    tsk_id_t indexes[] = { 0, 0, 0, 1 };
+    double bad_windows[] = { -1, -1 };
+    double weights[10];
+    double result[10];
+
+    memset(weights, 0, sizeof(weights));
+
+    ret = method(ts, 2, weights, 2, indexes, 0, NULL, result, 0);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+
+    ret = method(ts, 0, weights, 2, indexes, 0, NULL, result, 0);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_INSUFFICIENT_WEIGHTS);
+
+    ret = method(ts, 2, weights, 2, indexes, 1, bad_windows, result, 0);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
+}
+
 static void
 verify_three_way_stat_func_errors(tsk_treeseq_t *ts, general_sample_stat_method *method)
 {
@@ -973,6 +1051,128 @@ test_single_tree_general_stat_errors(void)
     tsk_treeseq_free(&ts);
 }
 
+static void
+test_single_tree_divergence_matrix(void)
+{
+    tsk_treeseq_t ts;
+    int ret;
+    double result[16];
+    double D_branch[16] = { 0, 2, 6, 6, 2, 0, 6, 6, 6, 6, 0, 4, 6, 6, 4, 0 };
+    double D_site[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+
+    tsk_treeseq_from_text(&ts, 1, single_tree_ex_nodes, single_tree_ex_edges, NULL, NULL,
+        NULL, NULL, NULL, 0);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(16, result, D_branch);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_SITE, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(16, result, D_site);
+
+    verify_divergence_matrix(&ts, TSK_STAT_BRANCH);
+    verify_divergence_matrix(&ts, TSK_STAT_SITE);
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_single_tree_divergence_matrix_internal_samples(void)
+{
+    tsk_treeseq_t ts;
+    int ret;
+    double result[16];
+    double D[16] = { 0, 2, 4, 3, 2, 0, 4, 3, 4, 4, 0, 1, 3, 3, 1, 0 };
+
+    const char *nodes = "1  0   -1   -1\n" /* 2.00┊    6    ┊ */
+                        "1  0   -1   -1\n" /*     ┊  ┏━┻━┓  ┊ */
+                        "1  0   -1   -1\n" /* 1.00┊  4   5* ┊ */
+                        "0  0   -1   -1\n" /*     ┊ ┏┻┓ ┏┻┓ ┊ */
+                        "0  1   -1   -1\n" /* 0.00┊ 0 1 2 3 ┊ */
+                        "1  1   -1   -1\n" /*     0 * * *   1 */
+                        "0  2   -1   -1\n";
+    const char *edges = "0  1   4   0,1\n"
+                        "0  1   5   2,3\n"
+                        "0  1   6   4,5\n";
+    /* One mutations per branch so we get the same as the branch length value */
+    const char *sites = "0.1  A\n"
+                        "0.2  A\n"
+                        "0.3  A\n"
+                        "0.4  A\n"
+                        "0.5  A\n"
+                        "0.6  A\n";
+    const char *mutations = "0  0  T  -1\n"
+                            "1  1  T  -1\n"
+                            "2  2  T  -1\n"
+                            "3  3  T  -1\n"
+                            "4  4  T  -1\n"
+                            "5  5  T  -1\n";
+
+    tsk_treeseq_from_text(&ts, 1, nodes, edges, NULL, sites, mutations, NULL, NULL, 0);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(16, result, D);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_SITE, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(16, result, D);
+
+    verify_divergence_matrix(&ts, TSK_STAT_BRANCH);
+    verify_divergence_matrix(&ts, TSK_STAT_SITE);
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_single_tree_divergence_matrix_multi_root(void)
+{
+    tsk_treeseq_t ts;
+    int ret;
+    double result[16];
+    double D_branch[16] = { 0, 2, 3, 3, 2, 0, 3, 3, 3, 3, 0, 4, 3, 3, 4, 0 };
+    double D_site[16] = { 0, 4, 6, 6, 4, 0, 6, 6, 6, 6, 0, 8, 6, 6, 8, 0 };
+
+    const char *nodes = "1  0   -1   -1\n"
+                        "1  0   -1   -1\n"  /* 2.00┊      5  ┊ */
+                        "1  0   -1   -1\n"  /* 1.00┊  4      ┊ */
+                        "1  0   -1   -1\n"  /*     ┊ ┏┻┓ ┏┻┓ ┊ */
+                        "0  1   -1   -1\n"  /* 0.00┊ 0 1 2 3 ┊ */
+                        "0  2   -1   -1\n"; /*     0 * * * * 1 */
+    const char *edges = "0  1   4   0,1\n"
+                        "0  1   5   2,3\n";
+    /* Two mutations per branch unit so we get twice branch length value */
+    const char *sites = "0.1  A\n"
+                        "0.2  A\n"
+                        "0.3  A\n"
+                        "0.4  A\n";
+    const char *mutations = "0  0  B  -1\n"
+                            "0  0  C  0\n"
+                            "1  1  B  -1\n"
+                            "1  1  C  2\n"
+                            "2  2  B  -1\n"
+                            "2  2  C  4\n"
+                            "2  2  D  5\n"
+                            "2  2  E  6\n"
+                            "3  3  B  -1\n"
+                            "3  3  C  8\n"
+                            "3  3  D  9\n"
+                            "3  3  E  10\n";
+
+    tsk_treeseq_from_text(&ts, 1, nodes, edges, NULL, sites, mutations, NULL, NULL, 0);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(16, result, D_branch);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_SITE, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(16, result, D_site);
+
+    tsk_treeseq_free(&ts);
+}
+
 static void
 test_paper_ex_ld(void)
 {
@@ -1351,6 +1551,46 @@ test_paper_ex_genetic_relatedness_errors(void)
     tsk_treeseq_free(&ts);
 }
 
+static void
+test_paper_ex_genetic_relatedness_weighted(void)
+{
+    tsk_treeseq_t ts;
+    double weights[] = { 1.2, 0.1, 0.0, 0.0, 3.4, 5.0, 1.0, -1.0 };
+    tsk_id_t indexes[] = { 0, 0, 0, 1 };
+    double result[100];
+    tsk_size_t num_weights;
+    int ret;
+
+    tsk_treeseq_from_text(&ts, 10, paper_ex_nodes, paper_ex_edges, NULL, paper_ex_sites,
+        paper_ex_mutations, paper_ex_individuals, NULL, 0);
+
+    for (num_weights = 1; num_weights < 3; num_weights++) {
+        ret = tsk_treeseq_genetic_relatedness_weighted(
+            &ts, num_weights, weights, 2, indexes, 0, NULL, result, TSK_STAT_SITE);
+        CU_ASSERT_EQUAL_FATAL(ret, 0);
+        ret = tsk_treeseq_genetic_relatedness_weighted(
+            &ts, num_weights, weights, 2, indexes, 0, NULL, result, TSK_STAT_BRANCH);
+        CU_ASSERT_EQUAL_FATAL(ret, 0);
+        ret = tsk_treeseq_genetic_relatedness_weighted(
+            &ts, num_weights, weights, 2, indexes, 0, NULL, result, TSK_STAT_NODE);
+        CU_ASSERT_EQUAL_FATAL(ret, 0);
+    }
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_paper_ex_genetic_relatedness_weighted_errors(void)
+{
+    tsk_treeseq_t ts;
+
+    tsk_treeseq_from_text(&ts, 10, paper_ex_nodes, paper_ex_edges, NULL, paper_ex_sites,
+        paper_ex_mutations, paper_ex_individuals, NULL, 0);
+    verify_two_way_weighted_stat_func_errors(
+        &ts, tsk_treeseq_genetic_relatedness_weighted);
+    tsk_treeseq_free(&ts);
+}
+
 static void
 test_paper_ex_Y2_errors(void)
 {
@@ -1592,6 +1832,20 @@ test_paper_ex_afs(void)
     tsk_treeseq_free(&ts);
 }
 
+static void
+test_paper_ex_divergence_matrix(void)
+{
+    tsk_treeseq_t ts;
+
+    tsk_treeseq_from_text(&ts, 10, paper_ex_nodes, paper_ex_edges, NULL, paper_ex_sites,
+        paper_ex_mutations, paper_ex_individuals, NULL, 0);
+
+    verify_divergence_matrix(&ts, TSK_STAT_BRANCH);
+    verify_divergence_matrix(&ts, TSK_STAT_SITE);
+
+    tsk_treeseq_free(&ts);
+}
+
 static void
 test_nonbinary_ex_ld(void)
 {
@@ -1726,6 +1980,476 @@ test_ld_silent_mutations(void)
     free(base_ts);
 }
 
+static void
+test_paper_ex_two_site(void)
+{
+    tsk_treeseq_t ts;
+    double *result;
+    tsk_size_t result_size;
+    int ret;
+
+    tsk_treeseq_from_text(&ts, 10, paper_ex_nodes, paper_ex_edges, NULL, paper_ex_sites,
+        paper_ex_mutations, paper_ex_individuals, NULL, 0);
+
+    tsk_size_t sample_set_sizes[3];
+    tsk_size_t num_sample_sets;
+    tsk_id_t sample_sets[ts.num_samples * 3];
+
+    // First sample set contains all of the samples
+    sample_set_sizes[0] = ts.num_samples;
+    num_sample_sets = 1;
+    double truth_one_set[6] = { 1, 0.1111111111111111, 0.1111111111111111, 1, 1, 1 };
+
+    for (tsk_size_t i = 0; i < ts.num_samples; i++) {
+        sample_sets[i] = (tsk_id_t) i;
+    }
+
+    ret = tsk_treeseq_r2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 6);
+    assert_arrays_almost_equal(result_size * num_sample_sets, result, truth_one_set);
+    tsk_safe_free(result);
+
+    // Second sample set contains all of the samples
+    sample_set_sizes[1] = ts.num_samples;
+    num_sample_sets = 2;
+    for (tsk_size_t i = ts.num_samples; i < ts.num_samples * 2; i++) {
+        sample_sets[i] = (tsk_id_t) i - (tsk_id_t) ts.num_samples;
+    }
+
+    double truth_two_sets[12] = { 1, 1, 0.1111111111111111, 0.1111111111111111,
+        0.1111111111111111, 0.1111111111111111, 1, 1, 1, 1, 1, 1 };
+
+    ret = tsk_treeseq_r2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 6);
+    assert_arrays_almost_equal(result_size * num_sample_sets, result, truth_two_sets);
+    tsk_safe_free(result);
+
+    // Third sample set contains the first two samples
+    sample_set_sizes[2] = 2;
+    num_sample_sets = 3;
+    for (tsk_size_t i = ts.num_samples * 2; i < (ts.num_samples * 3) - 2; i++) {
+        sample_sets[i] = (tsk_id_t) i - (tsk_id_t) ts.num_samples * 2;
+    }
+
+    double truth_three_sets[18] = { 1, 1, 0, 0.1111111111111111, 0.1111111111111111, 0,
+        0.1111111111111111, 0.1111111111111111, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1 };
+
+    ret = tsk_treeseq_r2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 6);
+    assert_arrays_almost_equal(result_size * num_sample_sets, result, truth_three_sets);
+    tsk_safe_free(result);
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_two_site_correlated_multiallelic(void)
+{
+    const char *nodes = "1   0   -1\n"
+                        "1   0   -1\n"
+                        "1   0   -1\n"
+                        "1   0   -1\n"
+                        "1   0   -1\n"
+                        "1   0   -1\n"
+                        "1   0   -1\n"
+                        "1   0   -1\n"
+                        "1   0   -1\n"
+                        "0   2   -1\n"
+                        "0   4   -1\n"
+                        "0   6   -1\n"
+                        "0   8   -1\n"
+                        "0   10  -1\n"
+                        "0   12  -1\n"
+                        "0   14  -1\n"
+                        "0   16  -1\n";
+    const char *edges = "0   20   9    0,1\n"
+                        "0   20   10   2,9\n"
+                        "0   20   11   4,5\n"
+                        "0   20   12   6,11\n"
+                        "0   20   13   7,8\n"
+                        "0   20   14   3,10\n"
+                        "0   10   15   12\n"
+                        "10  20   15   13\n"
+                        "0   10   15   14\n"
+                        "10  20   15   14\n"
+                        "10  20   16   12\n"
+                        "0   10   16   13\n"
+                        "0   10   16   15\n"
+                        "10  20   16   15\n";
+    const char *sites = "7   A\n"
+                        "13  G\n";
+    const char *mutations = "0   15  T  -1\n"
+                            "0   14  G   0\n"
+                            "1   15  T  -1\n"
+                            "1   13  C   2\n";
+
+    tsk_treeseq_t ts;
+    tsk_treeseq_from_text(&ts, 20, nodes, edges, NULL, sites, mutations, NULL, NULL, 0);
+
+    tsk_size_t sample_set_sizes[1] = { ts.num_samples };
+    tsk_size_t num_sample_sets = 1;
+    tsk_id_t sample_sets[ts.num_samples];
+    for (tsk_size_t i = 0; i < ts.num_samples; i++) {
+        sample_sets[i] = (tsk_id_t) i;
+    }
+
+    int ret;
+    double *result;
+    tsk_size_t result_size;
+
+    double truth_D[3]
+        = { 0.043209876543209874, -0.018518518518518517, 0.05555555555555555 };
+    double truth_D2[3]
+        = { 0.023844603634269844, 0.02384460363426984, 0.02384460363426984 };
+    double truth_r2[3] = { 1, 1, 1 };
+    double truth_D_prime[3]
+        = { 0.7777777777777777, 0.4444444444444444, 0.6666666666666666 };
+    double truth_r[3]
+        = { 0.18377223398316206, -0.12212786219416509, 0.2609542781331212 };
+    double truth_Dz[3]
+        = { 0.0033870175616860566, 0.003387017561686057, 0.003387017561686057 };
+    double truth_pi2[3]
+        = { 0.04579247743399549, 0.04579247743399549, 0.0457924774339955 };
+
+    ret = tsk_treeseq_D(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_D);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_D2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_D2);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_r2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_r2);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_D_prime(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0,
+        NULL, 0, NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_D_prime);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_r(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_r);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_Dz(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_Dz);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_pi2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL,
+        0, NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_pi2);
+    tsk_safe_free(result);
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_two_site_uncorrelated_multiallelic(void)
+{
+    const char *nodes = "1   0  -1\n"
+                        "1   0  -1\n"
+                        "1   0  -1\n"
+                        "1   0  -1\n"
+                        "1   0  -1\n"
+                        "1   0  -1\n"
+                        "1   0  -1\n"
+                        "1   0  -1\n"
+                        "1   0  -1\n"
+                        "0   2  -1\n"
+                        "0   4  -1\n"
+                        "0   6  -1\n"
+                        "0   8  -1\n"
+                        "0   10 -1\n"
+                        "0   12 -1\n"
+                        "0   14 -1\n"
+                        "0   16 -1\n"
+                        "0   2  -1\n"
+                        "0   4  -1\n"
+                        "0   6  -1\n"
+                        "0   8  -1\n"
+                        "0   10 -1\n"
+                        "0   12 -1\n"
+                        "0   14 -1\n"
+                        "0   16 -1\n";
+    const char *edges = "0     10    9      0,1\n"
+                        "10    20    17     0,3\n"
+                        "0     10    10     2,9\n"
+                        "10    20    18     6,17\n"
+                        "0     10    11     3,4\n"
+                        "10    20    19     1,4\n"
+                        "0     10    12     5,11\n"
+                        "10    20    20     7,19\n"
+                        "0     10    13     6,7\n"
+                        "10    20    21     2,5\n"
+                        "0     10    14     8,13\n"
+                        "10    20    22     8,21\n"
+                        "0     10    15     10,12\n"
+                        "10    20    23     18,20\n"
+                        "0     10    16     14,15\n"
+                        "10    20    24     22,23\n";
+    const char *sites = "7   A\n"
+                        "13  G\n";
+    const char *mutations = "0   15  T  -1\n"
+                            "0   12  G   0\n"
+                            "1   23  T  -1\n"
+                            "1   20  A   2\n";
+
+    tsk_treeseq_t ts;
+    tsk_treeseq_from_text(&ts, 20, nodes, edges, NULL, sites, mutations, NULL, NULL, 0);
+
+    tsk_size_t sample_set_sizes[1] = { ts.num_samples };
+    tsk_size_t num_sample_sets = 1;
+    tsk_id_t sample_sets[ts.num_samples];
+    for (tsk_size_t i = 0; i < ts.num_samples; i++) {
+        sample_sets[i] = (tsk_id_t) i;
+    }
+
+    int ret;
+    double *result;
+    tsk_size_t result_size;
+
+    double truth_D[3] = { 0.05555555555555555, 0.0, 0.05555555555555555 };
+    double truth_D2[3] = { 0.024691358024691357, 0.0, 0.024691358024691357 };
+    double truth_r2[3] = { 1, 0, 1 };
+    double truth_D_prime[3] = { 0.6666666666666665, 0.0, 0.6666666666666665 };
+    double truth_r[3] = { 0.24999999999999997, 0.0, 0.24999999999999997 };
+    double truth_Dz[3] = { 0.0, 0.0, 0.0 };
+    double truth_pi2[3]
+        = { 0.04938271604938272, 0.04938271604938272, 0.04938271604938272 };
+
+    ret = tsk_treeseq_D(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_D);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_D2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_D2);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_r2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_r2);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_D_prime(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0,
+        NULL, 0, NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_D_prime);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_r(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_r);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_Dz(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL, 0,
+        NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_Dz);
+    tsk_safe_free(result);
+
+    ret = tsk_treeseq_pi2(&ts, num_sample_sets, sample_set_sizes, sample_sets, 0, NULL,
+        0, NULL, 0, &result_size, &result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    CU_ASSERT_EQUAL(result_size, 3);
+    assert_arrays_almost_equal(result_size, result, truth_pi2);
+    tsk_safe_free(result);
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_simplest_divergence_matrix(void)
+{
+    const char *nodes = "1  0   0\n"
+                        "1  0   0\n"
+                        "0  1   0\n";
+    const char *edges = "0  1   2   0,1\n";
+    tsk_treeseq_t ts;
+    tsk_id_t sample_ids[] = { 0, 1 };
+    double D_branch[4] = { 0, 2, 2, 0 };
+    double D_site[4] = { 0, 0, 0, 0 };
+    double result[4];
+    int ret;
+
+    tsk_treeseq_from_text(&ts, 1, nodes, edges, NULL, NULL, NULL, NULL, NULL, 0);
+
+    ret = tsk_treeseq_divergence_matrix(
+        &ts, 2, sample_ids, 0, NULL, TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(4, D_branch, result);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 2, sample_ids, 0, NULL, 0, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(4, D_site, result);
+
+    ret = tsk_treeseq_divergence_matrix(
+        &ts, 2, sample_ids, 0, NULL, TSK_STAT_SITE, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(4, D_site, result);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(4, D_branch, result);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_SITE, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(4, D_site, result);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 0, NULL, 0, NULL, TSK_STAT_NODE, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_UNSUPPORTED_STAT_MODE);
+
+    ret = tsk_treeseq_divergence_matrix(
+        &ts, 0, NULL, 0, NULL, TSK_STAT_SPAN_NORMALISE, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_STAT_SPAN_NORMALISE_UNSUPPORTED);
+
+    ret = tsk_treeseq_divergence_matrix(
+        &ts, 0, NULL, 0, NULL, TSK_STAT_POLARISED, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_STAT_POLARISED_UNSUPPORTED);
+
+    ret = tsk_treeseq_divergence_matrix(
+        &ts, 0, NULL, 0, NULL, TSK_STAT_SITE | TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_MULTIPLE_STAT_MODES);
+
+    sample_ids[0] = -1;
+    ret = tsk_treeseq_divergence_matrix(&ts, 2, sample_ids, 0, NULL, 0, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_NODE_OUT_OF_BOUNDS);
+
+    sample_ids[0] = 3;
+    ret = tsk_treeseq_divergence_matrix(&ts, 2, sample_ids, 0, NULL, 0, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_NODE_OUT_OF_BOUNDS);
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_simplest_divergence_matrix_windows(void)
+{
+    const char *nodes = "1  0   0\n"
+                        "1  0   0\n"
+                        "0  1   0\n";
+    const char *edges = "0  1   2   0,1\n";
+    tsk_treeseq_t ts;
+    tsk_id_t sample_ids[] = { 0, 1 };
+    double D_branch[8] = { 0, 1, 1, 0, 0, 1, 1, 0 };
+    double D_site[8] = { 0, 0, 0, 0, 0, 0, 0, 0 };
+    double result[8];
+    double windows[] = { 0, 0.5, 1 };
+    int ret;
+
+    tsk_treeseq_from_text(&ts, 1, nodes, edges, NULL, NULL, NULL, NULL, NULL, 0);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 2, sample_ids, 2, windows, 0, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(8, D_site, result);
+    ret = tsk_treeseq_divergence_matrix(
+        &ts, 2, sample_ids, 2, windows, TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(8, D_branch, result);
+
+    ret = tsk_treeseq_divergence_matrix(&ts, 2, sample_ids, 0, windows, 0, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_NUM_WINDOWS);
+
+    windows[0] = -1;
+    ret = tsk_treeseq_divergence_matrix(&ts, 2, sample_ids, 2, windows, 0, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
+
+    windows[0] = 0.45;
+    windows[2] = 1.5;
+    ret = tsk_treeseq_divergence_matrix(&ts, 2, sample_ids, 2, windows, 0, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
+
+    windows[0] = 0.55;
+    windows[2] = 1.0;
+    ret = tsk_treeseq_divergence_matrix(&ts, 2, sample_ids, 2, windows, 0, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_BAD_WINDOWS);
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_simplest_divergence_matrix_internal_sample(void)
+{
+    const char *nodes = "1  0   0\n"
+                        "1  0   0\n"
+                        "0  1   0\n";
+    const char *edges = "0  1   2   0,1\n";
+    tsk_treeseq_t ts;
+    tsk_id_t sample_ids[] = { 0, 1, 2 };
+    double result[9];
+    double D_branch[9] = { 0, 2, 1, 2, 0, 1, 1, 1, 0 };
+    double D_site[9] = { 0, 0, 0, 0, 0, 0, 0, 0, 0 };
+    int ret;
+
+    tsk_treeseq_from_text(&ts, 1, nodes, edges, NULL, NULL, NULL, NULL, NULL, 0);
+
+    ret = tsk_treeseq_divergence_matrix(
+        &ts, 3, sample_ids, 0, NULL, TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(9, D_branch, result);
+
+    ret = tsk_treeseq_divergence_matrix(
+        &ts, 3, sample_ids, 0, NULL, TSK_STAT_SITE, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+    assert_arrays_almost_equal(9, D_site, result);
+
+    tsk_treeseq_free(&ts);
+}
+
+static void
+test_multiroot_divergence_matrix(void)
+{
+    tsk_treeseq_t ts;
+
+    tsk_treeseq_from_text(&ts, 10, multiroot_ex_nodes, multiroot_ex_edges, NULL,
+        multiroot_ex_sites, multiroot_ex_mutations, NULL, NULL, 0);
+
+    verify_divergence_matrix(&ts, TSK_STAT_BRANCH);
+    verify_divergence_matrix(&ts, TSK_STAT_SITE);
+
+    tsk_treeseq_free(&ts);
+}
+
 int
 main(int argc, char **argv)
 {
@@ -1745,6 +2469,11 @@ main(int argc, char **argv)
             test_single_tree_genealogical_nearest_neighbours },
         { "test_single_tree_general_stat", test_single_tree_general_stat },
         { "test_single_tree_general_stat_errors", test_single_tree_general_stat_errors },
+        { "test_single_tree_divergence_matrix", test_single_tree_divergence_matrix },
+        { "test_single_tree_divergence_matrix_internal_samples",
+            test_single_tree_divergence_matrix_internal_samples },
+        { "test_single_tree_divergence_matrix_multi_root",
+            test_single_tree_divergence_matrix_multi_root },
 
         { "test_paper_ex_ld", test_paper_ex_ld },
         { "test_paper_ex_mean_descendants", test_paper_ex_mean_descendants },
@@ -1773,6 +2502,10 @@ main(int argc, char **argv)
         { "test_paper_ex_genetic_relatedness_errors",
             test_paper_ex_genetic_relatedness_errors },
         { "test_paper_ex_genetic_relatedness", test_paper_ex_genetic_relatedness },
+        { "test_paper_ex_genetic_relatedness_weighted",
+            test_paper_ex_genetic_relatedness_weighted },
+        { "test_paper_ex_genetic_relatedness_weighted_errors",
+            test_paper_ex_genetic_relatedness_weighted_errors },
         { "test_paper_ex_Y2_errors", test_paper_ex_Y2_errors },
         { "test_paper_ex_Y2", test_paper_ex_Y2 },
         { "test_paper_ex_f2_errors", test_paper_ex_f2_errors },
@@ -1785,6 +2518,7 @@ main(int argc, char **argv)
         { "test_paper_ex_f4", test_paper_ex_f4 },
         { "test_paper_ex_afs_errors", test_paper_ex_afs_errors },
         { "test_paper_ex_afs", test_paper_ex_afs },
+        { "test_paper_ex_divergence_matrix", test_paper_ex_divergence_matrix },
 
         { "test_nonbinary_ex_ld", test_nonbinary_ex_ld },
         { "test_nonbinary_ex_mean_descendants", test_nonbinary_ex_mean_descendants },
@@ -1798,6 +2532,19 @@ main(int argc, char **argv)
         { "test_ld_multi_mutations", test_ld_multi_mutations },
         { "test_ld_silent_mutations", test_ld_silent_mutations },
 
+        { "test_paper_ex_two_site", test_paper_ex_two_site },
+        { "test_two_site_correlated_multiallelic",
+            test_two_site_correlated_multiallelic },
+        { "test_two_site_uncorrelated_multiallelic",
+            test_two_site_uncorrelated_multiallelic },
+
+        { "test_simplest_divergence_matrix", test_simplest_divergence_matrix },
+        { "test_simplest_divergence_matrix_windows",
+            test_simplest_divergence_matrix_windows },
+        { "test_simplest_divergence_matrix_internal_sample",
+            test_simplest_divergence_matrix_internal_sample },
+        { "test_multiroot_divergence_matrix", test_multiroot_divergence_matrix },
+
         { NULL, NULL },
     };
     return test_main(tests, argc, argv);
diff --git a/tests/test_trees.c b/tests/test_trees.c
index 94e33ee..cceb11d 100644
--- a/tests/test_trees.c
+++ b/tests/test_trees.c
@@ -5395,7 +5395,6 @@ test_simplify_keep_input_roots_multi_tree(void)
 
     tsk_treeseq_from_text(&ts, 10, paper_ex_nodes, paper_ex_edges, NULL, paper_ex_sites,
         paper_ex_mutations, paper_ex_individuals, NULL, 0);
-    tsk_treeseq_dump(&ts, "tmp.trees", 0);
     ret = tsk_treeseq_simplify(
         &ts, samples, 2, TSK_SIMPLIFY_KEEP_INPUT_ROOTS, &simplified, NULL);
     CU_ASSERT_EQUAL_FATAL(ret, 0);
@@ -7801,7 +7800,7 @@ test_time_uncalibrated(void)
     tsk_size_t sample_set_sizes[] = { 2, 2 };
     tsk_id_t samples[] = { 0, 1, 2, 3 };
     tsk_size_t num_samples;
-    double result[10];
+    double result[100];
     double *W;
     double *sigma;
 
@@ -7857,6 +7856,12 @@ test_time_uncalibrated(void)
         TSK_STAT_BRANCH | TSK_STAT_ALLOW_TIME_UNCALIBRATED, sigma);
     CU_ASSERT_EQUAL_FATAL(ret, 0);
 
+    ret = tsk_treeseq_divergence_matrix(&ts2, 0, NULL, 0, NULL, TSK_STAT_BRANCH, result);
+    CU_ASSERT_EQUAL_FATAL(ret, TSK_ERR_TIME_UNCALIBRATED);
+    ret = tsk_treeseq_divergence_matrix(&ts2, 0, NULL, 0, NULL,
+        TSK_STAT_BRANCH | TSK_STAT_ALLOW_TIME_UNCALIBRATED, result);
+    CU_ASSERT_EQUAL_FATAL(ret, 0);
+
     tsk_safe_free(W);
     tsk_safe_free(sigma);
     tsk_treeseq_free(&ts);
diff --git a/tests/testlib.c b/tests/testlib.c
index 823068d..043ae5c 100644
--- a/tests/testlib.c
+++ b/tests/testlib.c
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2022 Tskit Developers
+ * Copyright (c) 2019-2023 Tskit Developers
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -966,6 +966,16 @@ tskit_suite_init(void)
     return CUE_SUCCESS;
 }
 
+void
+assert_arrays_almost_equal(tsk_size_t len, double *a, double *b)
+{
+    tsk_size_t j;
+
+    for (j = 0; j < len; j++) {
+        CU_ASSERT_DOUBLE_EQUAL(a[j], b[j], 1e-9);
+    }
+}
+
 static int
 tskit_suite_cleanup(void)
 {
diff --git a/tests/testlib.h b/tests/testlib.h
index d042d60..69efb14 100644
--- a/tests/testlib.h
+++ b/tests/testlib.h
@@ -1,7 +1,7 @@
 /*
  * MIT License
  *
- * Copyright (c) 2019-2021 Tskit Developers
+ * Copyright (c) 2019-2023 Tskit Developers
  *
  * Permission is hereby granted, free of charge, to any person obtaining a copy
  * of this software and associated documentation files (the "Software"), to deal
@@ -54,6 +54,8 @@ void parse_individuals(const char *text, tsk_individual_table_t *individual_tabl
 
 void unsort_edges(tsk_edge_table_t *edges, size_t start);
 
+void assert_arrays_almost_equal(tsk_size_t len, double *a, double *b);
+
 extern const char *single_tree_ex_nodes;
 extern const char *single_tree_ex_edges;
 extern const char *single_tree_ex_sites;
diff --git a/tskit/core.c b/tskit/core.c
index b1ea25b..78a01de 100644
--- a/tskit/core.c
+++ b/tskit/core.c
@@ -466,6 +466,19 @@ tsk_strerror_internal(int err)
             ret = "Statistics using branch lengths cannot be calculated when time_units "
                   "is 'uncalibrated'. (TSK_ERR_TIME_UNCALIBRATED)";
             break;
+        case TSK_ERR_STAT_POLARISED_UNSUPPORTED:
+            ret = "The TSK_STAT_POLARISED option is not supported by this statistic. "
+                  "(TSK_ERR_STAT_POLARISED_UNSUPPORTED)";
+            break;
+        case TSK_ERR_STAT_SPAN_NORMALISE_UNSUPPORTED:
+            ret = "The TSK_STAT_SPAN_NORMALISE option is not supported by this "
+                  "statistic. "
+                  "(TSK_ERR_STAT_SPAN_NORMALISE_UNSUPPORTED)";
+            break;
+        case TSK_ERR_INSUFFICIENT_WEIGHTS:
+            ret = "Insufficient weights provided (at least 1 required). "
+                  "(TSK_ERR_INSUFFICIENT_WEIGHTS)";
+            break;
 
         /* Mutation mapping errors */
         case TSK_ERR_GENOTYPES_ALL_MISSING:
@@ -781,8 +794,8 @@ tsk_search_sorted(const double *restrict array, tsk_size_t size, double value)
             upper = mid;
         }
     }
-    offset = (int64_t)(array[lower] < value);
-    return (tsk_size_t)(lower + offset);
+    offset = (int64_t) (array[lower] < value);
+    return (tsk_size_t) (lower + offset);
 }
 
 /* Rounds the specified double to the closest multiple of 10**-num_digits. If
@@ -1164,3 +1177,75 @@ tsk_avl_tree_int_ordered_nodes(const tsk_avl_tree_int_t *self, tsk_avl_node_int_
     ordered_nodes_traverse(self->head.rlink, 0, out);
     return 0;
 }
+
+/* Bit Array implementation. Allows us to store unsigned integers in a compact manner.
+ * Currently implemented as an array of 32-bit unsigned integers for SIMD friendliness,
+ * (needs more profiling) */
+
+void
+tsk_intersect_bit_array(const tsk_bit_array_t *a, const tsk_bit_array_t *b,
+    tsk_bit_array_t *out, const tsk_size_t len)
+{
+    for (tsk_size_t i = 0; i < len; i++) {
+        out[i] = a[i] & b[i];
+    }
+}
+
+void
+tsk_subtract_bit_arrays(
+    tsk_bit_array_t *a, const tsk_bit_array_t *b, const tsk_size_t len)
+{
+    for (tsk_size_t i = 0; i < len; i++) {
+        a[i] &= ~(b[i]);
+    }
+}
+
+void
+tsk_add_bit_arrays(tsk_bit_array_t *a, const tsk_bit_array_t *b, const tsk_size_t len)
+{
+    for (tsk_size_t i = 0; i < len; i++) {
+        a[i] |= b[i];
+    }
+}
+
+void
+tsk_add_bit_to_bit_array(tsk_bit_array_t *a, const tsk_bit_array_t bit)
+{
+    tsk_bit_array_t i = bit >> TSK_BIT_ARRAY_CHUNK;
+    a[i] |= (tsk_bit_array_t) 1 << (bit - (TSK_BIT_ARRAY_NUM_BITS * i));
+}
+
+bool
+tsk_bit_in_array(const tsk_bit_array_t *a, const tsk_bit_array_t bit)
+{
+    tsk_bit_array_t i = bit >> TSK_BIT_ARRAY_CHUNK;
+    return a[i] & ((tsk_bit_array_t) 1 << (bit - (TSK_BIT_ARRAY_NUM_BITS * i)));
+}
+
+bool
+tsk_id_in_array(tsk_bit_array_t *a, const tsk_id_t node)
+{
+    if (node == TSK_NULL) {
+        return false;
+    }
+    return tsk_bit_in_array(a, (tsk_bit_array_t) node);
+}
+
+void
+tsk_count_bit_array(const tsk_bit_array_t *a, const tsk_size_t len, tsk_size_t *c)
+{
+    /* Utilizes one iteration per set bit. There are implementations that use 15
+     * operations for 32 bit integers, see
+     * https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSet64
+     * However, this implementation might be more efficient across many architectures.
+     */
+    tsk_bit_array_t tmp;
+    *c = 0;
+    for (tsk_size_t i = 0; i < len; i++) {
+        tmp = a[i];
+        while (tmp) {
+            tmp &= (tmp - 1);
+            *c += 1;
+        }
+    }
+}
diff --git a/tskit/core.h b/tskit/core.h
index b8b9f35..d823b58 100644
--- a/tskit/core.h
+++ b/tskit/core.h
@@ -675,6 +675,20 @@ Statistics based on branch lengths were attempted when the ``time_units``
 were ``uncalibrated``.
 */
 #define TSK_ERR_TIME_UNCALIBRATED                                   -910
+/**
+The TSK_STAT_POLARISED option was passed to a statistic that does
+not support it.
+*/
+#define TSK_ERR_STAT_POLARISED_UNSUPPORTED                          -911
+/**
+The TSK_STAT_SPAN_NORMALISE option was passed to a statistic that does
+not support it.
+*/
+#define TSK_ERR_STAT_SPAN_NORMALISE_UNSUPPORTED                     -912
+/**
+Insufficient weights were provided.
+*/
+#define TSK_ERR_INSUFFICIENT_WEIGHTS                                -913
 /** @} */
 
 /**
@@ -995,6 +1009,25 @@ int tsk_memcmp(const void *s1, const void *s2, tsk_size_t size);
 void tsk_set_debug_stream(FILE *f);
 FILE *tsk_get_debug_stream(void);
 
+/* Bit Array functionality */
+
+typedef uint32_t tsk_bit_array_t;
+#define TSK_BIT_ARRAY_CHUNK ((tsk_bit_array_t) 5)
+#define TSK_BIT_ARRAY_NUM_BITS ((tsk_bit_array_t) 1 << TSK_BIT_ARRAY_CHUNK)
+#define TSK_BIT_ARRAY_NUM_CHUNKS(n)                                                     \
+    (((n) >> TSK_BIT_ARRAY_CHUNK) + (((n) % TSK_BIT_ARRAY_NUM_BITS) ? 1 : 0))
+
+void tsk_intersect_bit_array(const tsk_bit_array_t *a, const tsk_bit_array_t *b,
+    tsk_bit_array_t *out, const tsk_size_t len);
+void tsk_subtract_bit_arrays(
+    tsk_bit_array_t *a, const tsk_bit_array_t *b, const tsk_size_t len);
+void tsk_add_bit_arrays(
+    tsk_bit_array_t *a, const tsk_bit_array_t *b, const tsk_size_t len);
+void tsk_add_bit_to_bit_array(tsk_bit_array_t *a, const tsk_bit_array_t bit);
+bool tsk_bit_in_array(const tsk_bit_array_t *a, const tsk_bit_array_t bit);
+bool tsk_id_in_array(tsk_bit_array_t *a, const tsk_id_t node);
+void tsk_count_bit_array(const tsk_bit_array_t *a, const tsk_size_t len, tsk_size_t *c);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/tskit/trees.c b/tskit/trees.c
index 4604579..35fbb4f 100644
--- a/tskit/trees.c
+++ b/tskit/trees.c
@@ -227,7 +227,7 @@ tsk_treeseq_init_individuals(tsk_treeseq_t *self)
         if (ind != TSK_NULL) {
             node_array = self->individual_nodes[ind];
             tsk_bug_assert(node_array - self->individual_nodes_mem
-                           < (tsk_id_t)(total_node_refs - node_count[ind]));
+                           < (tsk_id_t) (total_node_refs - node_count[ind]));
             node_array[node_count[ind]] = node;
             node_count[ind] += 1;
         }
@@ -489,7 +489,7 @@ tsk_treeseq_init(
 
     if (tsk_treeseq_get_time_units_length(self) == strlen(TSK_TIME_UNITS_UNCALIBRATED)
         && !strncmp(tsk_treeseq_get_time_units(self), TSK_TIME_UNITS_UNCALIBRATED,
-               strlen(TSK_TIME_UNITS_UNCALIBRATED))) {
+            strlen(TSK_TIME_UNITS_UNCALIBRATED))) {
         self->time_uncalibrated = true;
     }
 out:
@@ -808,7 +808,7 @@ out:
 
 /* Stats functions */
 
-#define GET_2D_ROW(array, row_len, row) (array + (((size_t)(row_len)) * (size_t) row))
+#define GET_2D_ROW(array, row_len, row) (array + (((size_t) (row_len)) * (size_t) row))
 
 static inline double *
 GET_3D_ROW(double *base, tsk_size_t num_nodes, tsk_size_t output_dim,
@@ -851,7 +851,7 @@ tsk_treeseq_genealogical_nearest_neighbours(const tsk_treeseq_t *self,
     /* TODO It's probably not worth bothering with the int16_t here. */
     int16_t k, focal_reference_set;
     /* We use the K'th element of the array for the total. */
-    const int16_t K = (int16_t)(num_reference_sets + 1);
+    const int16_t K = (int16_t) (num_reference_sets + 1);
     tsk_size_t num_nodes = self->tables->nodes.num_rows;
     const tsk_id_t num_edges = (tsk_id_t) self->tables->edges.num_rows;
     const tsk_id_t *restrict I = self->tables->indexes.edge_insertion_order;
@@ -1034,7 +1034,7 @@ tsk_treeseq_mean_descendants(const tsk_treeseq_t *self,
     tsk_size_t j;
     int32_t k;
     /* We use the K'th element of the array for the total. */
-    const int32_t K = (int32_t)(num_reference_sets + 1);
+    const int32_t K = (int32_t) (num_reference_sets + 1);
     tsk_size_t num_nodes = self->tables->nodes.num_rows;
     const tsk_id_t num_edges = (tsk_id_t) self->tables->edges.num_rows;
     const tsk_id_t *restrict I = self->tables->indexes.edge_insertion_order;
@@ -1191,9 +1191,11 @@ out:
  * General stats framework
  ***********************************/
 
+#define TSK_REQUIRE_FULL_SPAN 1
+
 static int
-tsk_treeseq_check_windows(
-    const tsk_treeseq_t *self, tsk_size_t num_windows, const double *windows)
+tsk_treeseq_check_windows(const tsk_treeseq_t *self, tsk_size_t num_windows,
+    const double *windows, tsk_flags_t options)
 {
     int ret = TSK_ERR_BAD_WINDOWS;
     tsk_size_t j;
@@ -1202,12 +1204,23 @@ tsk_treeseq_check_windows(
         ret = TSK_ERR_BAD_NUM_WINDOWS;
         goto out;
     }
-    /* TODO these restrictions can be lifted later if we want a specific interval. */
-    if (windows[0] != 0) {
-        goto out;
-    }
-    if (windows[num_windows] != self->tables->sequence_length) {
-        goto out;
+    if (options & TSK_REQUIRE_FULL_SPAN) {
+        /* TODO the general stat code currently requires that we include the
+         * entire tree sequence span. This should be relaxed, so hopefully
+         * this branch (and the option) can be removed at some point */
+        if (windows[0] != 0) {
+            goto out;
+        }
+        if (windows[num_windows] != self->tables->sequence_length) {
+            goto out;
+        }
+    } else {
+        if (windows[0] < 0) {
+            goto out;
+        }
+        if (windows[num_windows] > self->tables->sequence_length) {
+            goto out;
+        }
     }
     for (j = 0; j < num_windows; j++) {
         if (windows[j] >= windows[j + 1]) {
@@ -1960,7 +1973,8 @@ tsk_treeseq_general_stat(const tsk_treeseq_t *self, tsk_size_t state_dim,
         num_windows = 1;
         windows = default_windows;
     } else {
-        ret = tsk_treeseq_check_windows(self, num_windows, windows);
+        ret = tsk_treeseq_check_windows(
+            self, num_windows, windows, TSK_REQUIRE_FULL_SPAN);
         if (ret != 0) {
             goto out;
         }
@@ -2057,6 +2071,37 @@ typedef struct {
     const tsk_id_t *set_indexes;
 } sample_count_stat_params_t;
 
+typedef struct {
+    double *total_weights;
+    const tsk_id_t *index_tuples;
+} indexed_weight_stat_params_t;
+
+static int
+init_sample_weights(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets, double **weights)
+{
+    int ret = 0;
+    tsk_id_t u, sample_index;
+    tsk_size_t j, k, l;
+    double *weight_row;
+    j = 0;
+    for (k = 0; k < num_sample_sets; k++) {
+        for (l = 0; l < sample_set_sizes[k]; l++) {
+            u = sample_sets[j];
+            sample_index = self->sample_index_map[u];
+            weight_row = GET_2D_ROW(*weights, num_sample_sets, sample_index);
+            if (weight_row[k] != 0) {
+                ret = TSK_ERR_DUPLICATE_SAMPLE;
+                goto out;
+            }
+            weight_row[k] = 1;
+            j++;
+        }
+    }
+out:
+    return ret;
+}
+
 static int
 tsk_treeseq_sample_count_stat(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
     const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
@@ -2065,10 +2110,7 @@ tsk_treeseq_sample_count_stat(const tsk_treeseq_t *self, tsk_size_t num_sample_s
 {
     int ret = 0;
     const tsk_size_t num_samples = self->num_samples;
-    tsk_size_t j, k, l;
-    tsk_id_t u, sample_index;
     double *weights = NULL;
-    double *weight_row;
     sample_count_stat_params_t args = { .sample_sets = sample_sets,
         .num_sample_sets = num_sample_sets,
         .sample_set_sizes = sample_set_sizes,
@@ -2084,19 +2126,10 @@ tsk_treeseq_sample_count_stat(const tsk_treeseq_t *self, tsk_size_t num_sample_s
         ret = TSK_ERR_NO_MEMORY;
         goto out;
     }
-    j = 0;
-    for (k = 0; k < num_sample_sets; k++) {
-        for (l = 0; l < sample_set_sizes[k]; l++) {
-            u = sample_sets[j];
-            sample_index = self->sample_index_map[u];
-            weight_row = GET_2D_ROW(weights, num_sample_sets, sample_index);
-            if (weight_row[k] != 0) {
-                ret = TSK_ERR_DUPLICATE_SAMPLE;
-                goto out;
-            }
-            weight_row[k] = 1;
-            j++;
-        }
+    ret = init_sample_weights(
+        self, num_sample_sets, sample_set_sizes, sample_sets, &weights);
+    if (ret != 0) {
+        goto out;
     }
     ret = tsk_treeseq_general_stat(self, num_sample_sets, weights, result_dim, f, &args,
         num_windows, windows, options, result);
@@ -2106,383 +2139,568 @@ out:
 }
 
 /***********************************
- * Allele frequency spectrum
+ * Two Locus Statistics
  ***********************************/
 
-static inline void
-fold(tsk_size_t *restrict coordinate, const tsk_size_t *restrict dims,
-    tsk_size_t num_dims)
+// TODO: figure inspect pass by ref/value here
+static int
+get_allele_samples(const tsk_site_t *site, const tsk_size_t num_sample_chunks,
+    const tsk_bit_array_t *state, tsk_bit_array_t *allele_samples,
+    tsk_size_t *num_alleles)
 {
-    tsk_size_t k;
-    double n = 0;
-    int s = 0;
+    int ret = 0;
+    tsk_mutation_t mutation, parent_mut;
+    tsk_size_t mutation_index, allele, alt_allele_length;
+    /* The allele table */
+    tsk_size_t max_alleles = site->mutations_length + 1;
+    const char **alleles = tsk_malloc(max_alleles * sizeof(*alleles));
+    tsk_size_t *allele_lengths = tsk_calloc(max_alleles, sizeof(*allele_lengths));
+    const char *alt_allele;
+    const tsk_bit_array_t *state_row;
+    tsk_bit_array_t *allele_samples_row;
+    tsk_bit_array_t *alt_allele_samples_row;
 
-    for (k = 0; k < num_dims; k++) {
-        tsk_bug_assert(coordinate[k] < dims[k]);
-        n += (double) dims[k] - 1;
-        s += (int) coordinate[k];
-    }
-    n /= 2;
-    k = num_dims;
-    while (s == n && k > 0) {
-        k--;
-        n -= ((double) (dims[k] - 1)) / 2;
-        s -= (int) coordinate[k];
+    if (alleles == NULL || allele_lengths == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
     }
-    if (s > n) {
-        for (k = 0; k < num_dims; k++) {
-            s = (int) (dims[k] - 1 - coordinate[k]);
-            tsk_bug_assert(s >= 0);
-            coordinate[k] = (tsk_size_t) s;
+
+    tsk_bug_assert(state != NULL);
+    alleles[0] = site->ancestral_state;
+    allele_lengths[0] = site->ancestral_state_length;
+    *num_alleles = 1;
+
+    for (mutation_index = 0; mutation_index < site->mutations_length; mutation_index++) {
+        mutation = site->mutations[mutation_index];
+        /* Compute the allele index for this derived state value. */
+        allele = 0;
+        while (allele < *num_alleles) {
+            if (mutation.derived_state_length == allele_lengths[allele]
+                && tsk_memcmp(
+                       mutation.derived_state, alleles[allele], allele_lengths[allele])
+                       == 0) {
+                break;
+            }
+            allele++;
+        }
+        if (allele == *num_alleles) {
+            tsk_bug_assert(allele < max_alleles);
+            alleles[allele] = mutation.derived_state;
+            allele_lengths[allele] = mutation.derived_state_length;
+            (*num_alleles)++;
+        }
+
+        /* Add the mutation's samples to this allele */
+        allele_samples_row = GET_2D_ROW(allele_samples, num_sample_chunks, allele);
+        state_row = GET_2D_ROW(state, num_sample_chunks, mutation_index);
+        tsk_add_bit_arrays(allele_samples_row, state_row, num_sample_chunks);
+
+        /* Get the index for the alternate allele that we must substract from */
+        alt_allele = site->ancestral_state;
+        alt_allele_length = site->ancestral_state_length;
+        if (mutation.parent != TSK_NULL) {
+            parent_mut = site->mutations[mutation.parent - site->mutations[0].id];
+            alt_allele = parent_mut.derived_state;
+            alt_allele_length = parent_mut.derived_state_length;
+        }
+        allele = 0;
+        while (allele < *num_alleles) {
+            if (alt_allele_length == allele_lengths[allele]
+                && tsk_memcmp(alt_allele, alleles[allele], allele_lengths[allele])
+                       == 0) {
+                break;
+            }
+            allele++;
         }
+        tsk_bug_assert(allele < *num_alleles);
+
+        alt_allele_samples_row = GET_2D_ROW(allele_samples, num_sample_chunks, allele);
+        tsk_subtract_bit_arrays(
+            alt_allele_samples_row, allele_samples_row, num_sample_chunks);
     }
+out:
+    tsk_safe_free(alleles);
+    tsk_safe_free(allele_lengths);
+    return ret;
 }
 
 static int
-tsk_treeseq_update_site_afs(const tsk_treeseq_t *self, const tsk_site_t *site,
-    const double *total_counts, const double *counts, tsk_size_t num_sample_sets,
-    tsk_size_t window_index, tsk_size_t *result_dims, tsk_flags_t options,
-    double *result)
+get_mutation_samples(const tsk_treeseq_t *self, const tsk_size_t tree_index,
+    const tsk_size_t num_sample_chunks, const tsk_id_t *right_child,
+    const tsk_id_t *left_sib, const tsk_id_t *parent, const tsk_size_t *site_offsets,
+    tsk_bit_array_t *restrict *allele_samples, tsk_size_t *restrict *num_alleles)
+// TODO: the restricts here, not sure. Are the row declarations aliases? I think so.
 {
     int ret = 0;
-    tsk_size_t afs_size;
-    tsk_size_t k, allele, num_alleles, all_samples;
-    double increment, *afs, *allele_counts, *allele_count;
-    tsk_size_t *coordinate = tsk_malloc(num_sample_sets * sizeof(*coordinate));
-    bool polarised = !!(options & TSK_STAT_POLARISED);
-    const tsk_size_t K = num_sample_sets + 1;
 
-    if (coordinate == NULL) {
+    const tsk_size_t num_edges = tsk_treeseq_get_num_edges(self);
+    const tsk_size_t num_sites = self->tree_sites_length[tree_index];
+    const tsk_flags_t *restrict flags = self->tables->nodes.flags;
+    const tsk_site_t *restrict tree_sites = self->tree_sites[tree_index];
+    const tsk_id_t *restrict mut_nodes = self->tables->mutations.node;
+    const tsk_site_t *restrict site;
+
+    tsk_id_t u, node, top_mut_node, *stack;
+    tsk_bit_array_t *mut_samples, *mut_samples_row, *node_paths, *path, *out_row;
+    tsk_size_t num_mutations, mut_samples_offset, num_node_chunks, mut_offset;
+    int stack_top;
+
+    // Get the number of mutations and the top mutation node
+    num_mutations = 0;
+    top_mut_node = 0;
+    for (tsk_size_t s = 0; s < num_sites; s++) {
+        site = &tree_sites[s];
+        for (tsk_size_t m = 0; m < site->mutations_length; m++) {
+            num_mutations++;
+            if (site->mutations[m].node > top_mut_node) {
+                top_mut_node = site->mutations[m].node;
+            }
+        }
+    }
+
+    mut_samples = tsk_calloc(num_mutations * num_sample_chunks, sizeof(*mut_samples));
+    num_node_chunks = TSK_BIT_ARRAY_NUM_CHUNKS(tsk_treeseq_get_num_nodes(self));
+
+    node_paths = tsk_calloc(num_node_chunks * num_mutations, sizeof(*node_paths));
+
+    // Size of stack is derived from tsk_tree_get_size_bound
+    stack = tsk_malloc((1 + self->num_samples + num_edges) * sizeof(*stack));
+
+    if (stack == NULL || node_paths == NULL || mut_samples == NULL) {
         ret = TSK_ERR_NO_MEMORY;
         goto out;
     }
-    ret = get_allele_weights(
-        site, counts, K, total_counts, &num_alleles, &allele_counts);
-    if (ret != 0) {
-        goto out;
+
+    stack_top = 0;
+    stack[stack_top] = parent[top_mut_node];
+
+    // Current position minus num ancestral alleles to this point, if there are any sites
+    mut_offset
+        = num_sites ? site_offsets[tree_sites[0].id] - (tsk_size_t) tree_sites[0].id : 0;
+
+    // Traverse the current tree, tracking which samples are under each mutation
+    while (stack_top >= 0) {
+        node = stack[stack_top];
+        stack_top--;
+        for (tsk_size_t m = 0; m < num_mutations; m++) {
+            path = GET_2D_ROW(node_paths, num_node_chunks, m);
+            mut_samples_row = GET_2D_ROW(mut_samples, num_sample_chunks, m);
+            if (mut_nodes[m + mut_offset] == node
+                || tsk_id_in_array(path, parent[node])) {
+                tsk_add_bit_to_bit_array(path, (tsk_bit_array_t) node);
+                if (flags[node] & TSK_NODE_IS_SAMPLE) {
+                    tsk_add_bit_to_bit_array(mut_samples_row, (tsk_bit_array_t) node);
+                }
+            }
+        }
+        u = right_child[node];
+        while (u != TSK_NULL) {
+            stack_top++;
+            stack[stack_top] = u;
+            u = left_sib[u];
+        }
     }
 
-    afs_size = result_dims[num_sample_sets];
-    afs = result + afs_size * window_index;
+    mut_samples_offset = 0;
+    for (tsk_size_t s = 0; s < num_sites; s++) {
+        site = &tree_sites[s];
 
-    increment = polarised ? 1 : 0.5;
-    /* Sum over the allele weights. Skip the ancestral state if polarised. */
-    for (allele = polarised ? 1 : 0; allele < num_alleles; allele++) {
-        allele_count = GET_2D_ROW(allele_counts, K, allele);
-        all_samples = (tsk_size_t) allele_count[num_sample_sets];
-        if (all_samples > 0 && all_samples < self->num_samples) {
-            for (k = 0; k < num_sample_sets; k++) {
-                coordinate[k] = (tsk_size_t) allele_count[k];
+        mut_samples_row = GET_2D_ROW(mut_samples, num_sample_chunks, mut_samples_offset);
+        mut_samples_offset += self->site_mutations_length[site->id];
+
+        out_row = GET_2D_ROW(*allele_samples, num_sample_chunks, site_offsets[site->id]);
+        get_allele_samples(site, num_sample_chunks, mut_samples_row, out_row,
+            &(*num_alleles)[site->id]);
+    }
+out:
+    tsk_safe_free(mut_samples);
+    tsk_safe_free(node_paths);
+    tsk_safe_free(stack);
+
+    return ret;
+}
+
+static int
+norm_hap_weighted(tsk_size_t state_dim, const double *hap_weights,
+    tsk_size_t TSK_UNUSED(n_a), tsk_size_t TSK_UNUSED(n_b), double *result, void *params)
+{
+    sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
+    const double *weight_row;
+    double n;
+    for (tsk_size_t k = 0; k < state_dim; k++) {
+        weight_row = GET_2D_ROW(hap_weights, 3, k);
+        n = (double) args.sample_set_sizes[k];
+        // TODO: what to do when n = 0
+        result[k] = weight_row[0] / n;
+    }
+    return 0;
+}
+
+static int
+norm_total_weighted(tsk_size_t state_dim, const double *TSK_UNUSED(hap_weights),
+    tsk_size_t n_a, tsk_size_t n_b, double *result, void *TSK_UNUSED(params))
+{
+    for (tsk_size_t k = 0; k < state_dim; k++) {
+        result[k] = 1 / (double) (n_a * n_b);
+    }
+    return 0;
+}
+
+static void
+get_all_samples_bits(tsk_bit_array_t *all_samples, tsk_size_t n, tsk_size_t n_chunks)
+{
+    const tsk_bit_array_t all = ~((tsk_bit_array_t) 0);
+    const tsk_bit_array_t remainder_samples = n % TSK_BIT_ARRAY_NUM_BITS;
+    all_samples[n_chunks - 1] = remainder_samples ? ~(all << remainder_samples) : all;
+    for (tsk_size_t i = 0; i < n_chunks - 1; i++) {
+        all_samples[i] = all;
+    }
+}
+
+static void
+sample_weights_to_bit_array(const double *weights, tsk_size_t num_sample_sets,
+    tsk_size_t num_samples, tsk_size_t num_sample_chunks, tsk_bit_array_t **sample_bits)
+{
+    const double *weight_row;
+    tsk_bit_array_t *bits_row;
+    for (tsk_bit_array_t i = 0; i < num_samples; i++) {
+        weight_row = GET_2D_ROW(weights, num_sample_sets, i);
+        for (tsk_size_t k = 0; k < num_sample_sets; k++) {
+            if (weight_row[k] != 0) {
+                bits_row = GET_2D_ROW(*sample_bits, num_sample_chunks, k);
+                tsk_add_bit_to_bit_array(bits_row, i);
             }
-            if (!polarised) {
-                fold(coordinate, result_dims, num_sample_sets);
+        }
+    }
+}
+
+typedef int norm_func_t(tsk_size_t state_dim, const double *hap_weights, tsk_size_t n_a,
+    tsk_size_t n_b, double *result, void *params);
+
+// TODO: should site_a/b be an id_t?
+static int
+compute_general_two_site_stat_result(tsk_size_t site_a, tsk_size_t site_a_offset,
+    tsk_size_t site_b, tsk_size_t site_b_offset, tsk_size_t num_sample_chunks,
+    const tsk_size_t *num_alleles, const tsk_bit_array_t *state, tsk_size_t state_dim,
+    tsk_bit_array_t *sample_sets, tsk_size_t result_dim, general_stat_func_t *f,
+    sample_count_stat_params_t *f_params, norm_func_t *norm_f, bool polarised,
+    double *result)
+{
+    int ret = 0;
+    const tsk_bit_array_t *A_samples, *B_samples;
+    tsk_size_t w_A = 0, w_B = 0, w_AB = 0;
+    tsk_bit_array_t *ss_row; // ss_ prefix refers to a sample set
+    tsk_bit_array_t ss_A_samples[num_sample_chunks], ss_B_samples[num_sample_chunks],
+        ss_AB_samples[num_sample_chunks], AB_samples[num_sample_chunks];
+    uint8_t polarised_val = polarised ? 1 : 0;
+
+    double weights[3 * state_dim];
+    double norm[state_dim];
+    double *hap_weight_row;
+    tsk_size_t row_len = num_alleles[site_b] * state_dim;
+    // TODO: is this stack allocation dangerous??
+    double result_tmp[row_len * num_alleles[site_a]];
+    double *result_tmp_row;
+
+    for (tsk_size_t mut_1 = polarised_val; mut_1 < num_alleles[site_a]; mut_1++) {
+        result_tmp_row = GET_2D_ROW(result_tmp, row_len, mut_1);
+        for (tsk_size_t mut_2 = polarised_val; mut_2 < num_alleles[site_b]; mut_2++) {
+            A_samples = GET_2D_ROW(state, num_sample_chunks, site_a_offset + mut_1);
+            B_samples = GET_2D_ROW(state, num_sample_chunks, site_b_offset + mut_2);
+            tsk_intersect_bit_array(A_samples, B_samples, AB_samples, num_sample_chunks);
+            for (tsk_size_t k = 0; k < state_dim; k++) {
+                ss_row = GET_2D_ROW(sample_sets, num_sample_chunks, k);
+                hap_weight_row = GET_2D_ROW(weights, 3, k);
+
+                tsk_intersect_bit_array(
+                    A_samples, ss_row, ss_A_samples, num_sample_chunks);
+                tsk_intersect_bit_array(
+                    B_samples, ss_row, ss_B_samples, num_sample_chunks);
+                tsk_intersect_bit_array(
+                    AB_samples, ss_row, ss_AB_samples, num_sample_chunks);
+
+                tsk_count_bit_array(ss_AB_samples, num_sample_chunks, &w_AB);
+                tsk_count_bit_array(ss_A_samples, num_sample_chunks, &w_A);
+                tsk_count_bit_array(ss_B_samples, num_sample_chunks, &w_B);
+
+                hap_weight_row[0] = (double) w_AB;
+                hap_weight_row[1] = (double) (w_A - w_AB); // w_Ab
+                hap_weight_row[2] = (double) (w_B - w_AB); // w_aB
             }
-            increment_nd_array_value(
-                afs, num_sample_sets, result_dims, coordinate, increment);
+            ret = f(state_dim, weights, result_dim, result_tmp_row, f_params);
+            if (ret != 0) {
+                goto out;
+            }
+            ret = norm_f(state_dim, weights, num_alleles[site_a] - polarised_val,
+                num_alleles[site_b] - polarised_val, norm, f_params);
+            if (ret != 0) {
+                goto out;
+            }
+            for (tsk_size_t k = 0; k < state_dim; k++) {
+                result[k] += result_tmp_row[k] * norm[k];
+            }
+            result_tmp_row += state_dim; // Advance to the next column
         }
     }
+
 out:
-    tsk_safe_free(coordinate);
-    tsk_safe_free(allele_counts);
     return ret;
 }
 
 static int
-tsk_treeseq_site_allele_frequency_spectrum(const tsk_treeseq_t *self,
-    tsk_size_t num_sample_sets, const tsk_size_t *sample_set_sizes, double *counts,
-    tsk_size_t num_windows, const double *windows, tsk_size_t *result_dims,
-    tsk_flags_t options, double *result)
+get_all_mutation_samples(const tsk_treeseq_t *self, const tsk_size_t num_sample_chunks,
+    const tsk_size_t *site_offsets, tsk_size_t *num_alleles,
+    tsk_bit_array_t **allele_samples)
 {
     int ret = 0;
-    tsk_id_t u, v;
-    tsk_size_t tree_site, tree_index, window_index;
-    tsk_size_t num_nodes = self->tables->nodes.num_rows;
+    const tsk_size_t num_nodes = self->tables->nodes.num_rows;
     const tsk_id_t num_edges = (tsk_id_t) self->tables->edges.num_rows;
-    const tsk_id_t *restrict I = self->tables->indexes.edge_insertion_order;
-    const tsk_id_t *restrict O = self->tables->indexes.edge_removal_order;
+    const tsk_id_t *restrict edges_in = self->tables->indexes.edge_insertion_order;
+    const tsk_id_t *restrict edges_out = self->tables->indexes.edge_removal_order;
     const double *restrict edge_left = self->tables->edges.left;
     const double *restrict edge_right = self->tables->edges.right;
     const tsk_id_t *restrict edge_parent = self->tables->edges.parent;
     const tsk_id_t *restrict edge_child = self->tables->edges.child;
     const double sequence_length = self->tables->sequence_length;
+
     tsk_id_t *restrict parent = tsk_malloc(num_nodes * sizeof(*parent));
-    tsk_site_t *site;
-    tsk_id_t tj, tk, h;
-    tsk_size_t j;
-    const tsk_size_t K = num_sample_sets + 1;
-    double t_left, t_right;
-    double *total_counts = tsk_malloc((1 + num_sample_sets) * sizeof(*total_counts));
+    tsk_id_t *restrict right_child = tsk_malloc(num_nodes * sizeof(*right_child));
+    tsk_id_t *restrict left_sib = tsk_malloc(num_nodes * sizeof(*left_sib));
+    tsk_id_t *restrict right_sib = tsk_malloc(num_nodes * sizeof(*right_sib));
 
-    if (parent == NULL || total_counts == NULL) {
+    if (parent == NULL || right_child == NULL || left_sib == NULL || right_sib == NULL) {
         ret = TSK_ERR_NO_MEMORY;
         goto out;
     }
+
     tsk_memset(parent, 0xff, num_nodes * sizeof(*parent));
+    tsk_memset(right_child, 0xff, num_nodes * sizeof(*right_child));
+    tsk_memset(left_sib, 0xff, num_nodes * sizeof(*left_sib));
+    tsk_memset(right_sib, 0xff, num_nodes * sizeof(*right_sib));
 
-    for (j = 0; j < num_sample_sets; j++) {
-        total_counts[j] = (double) sample_set_sizes[j];
-    }
-    total_counts[num_sample_sets] = (double) self->num_samples;
+    tsk_size_t tree_index;
+    double t_left, t_right;
+    tsk_id_t tj, tk, h, u, v, c;
 
-    /* Iterate over the trees */
     tj = 0;
     tk = 0;
     t_left = 0;
     tree_index = 0;
-    window_index = 0;
     while (tj < num_edges || t_left < sequence_length) {
-        while (tk < num_edges && edge_right[O[tk]] == t_left) {
-            h = O[tk];
+        while (tk < num_edges && edge_right[edges_out[tk]] == t_left) {
+            h = edges_out[tk];
             tk++;
             u = edge_child[h];
             v = edge_parent[h];
-            while (v != TSK_NULL) {
-                update_state(counts, K, v, u, -1);
-                v = parent[v];
+
+            if (left_sib[u] != TSK_NULL) {
+                right_sib[left_sib[u]] = right_sib[u];
+            }
+
+            if (right_sib[u] == TSK_NULL) {
+                right_child[v] = left_sib[u];
+            } else {
+                left_sib[right_sib[u]] = left_sib[u];
             }
+
+            left_sib[u] = TSK_NULL;
+            right_sib[u] = TSK_NULL;
             parent[u] = TSK_NULL;
         }
-
-        while (tj < num_edges && edge_left[I[tj]] == t_left) {
-            h = I[tj];
+        while (tj < num_edges && edge_left[edges_in[tj]] == t_left) {
+            h = edges_in[tj];
             tj++;
             u = edge_child[h];
             v = edge_parent[h];
             parent[u] = v;
-            while (v != TSK_NULL) {
-                update_state(counts, K, v, u, +1);
-                v = parent[v];
+
+            c = right_child[v];
+            if (c == TSK_NULL) {
+                left_sib[u] = TSK_NULL;
+                right_sib[u] = TSK_NULL;
+            } else {
+                right_sib[c] = u;
+                left_sib[u] = c;
+                right_sib[u] = TSK_NULL;
             }
+
+            right_child[v] = u;
         }
         t_right = sequence_length;
         if (tj < num_edges) {
-            t_right = TSK_MIN(t_right, edge_left[I[tj]]);
+            t_right = TSK_MIN(t_right, edge_left[edges_in[tj]]);
         }
         if (tk < num_edges) {
-            t_right = TSK_MIN(t_right, edge_right[O[tk]]);
+            t_right = TSK_MIN(t_right, edge_right[edges_out[tk]]);
         }
 
-        /* Update the sites */
-        for (tree_site = 0; tree_site < self->tree_sites_length[tree_index];
-             tree_site++) {
-            site = self->tree_sites[tree_index] + tree_site;
-            while (windows[window_index + 1] <= site->position) {
-                window_index++;
-                tsk_bug_assert(window_index < num_windows);
-            }
-            ret = tsk_treeseq_update_site_afs(self, site, total_counts, counts,
-                num_sample_sets, window_index, result_dims, options, result);
-            if (ret != 0) {
-                goto out;
-            }
-            tsk_bug_assert(windows[window_index] <= site->position);
-            tsk_bug_assert(site->position < windows[window_index + 1]);
+        ret = get_mutation_samples(self, tree_index, num_sample_chunks, right_child,
+            left_sib, parent, site_offsets, allele_samples, &num_alleles);
+        if (ret != 0) {
+            goto out;
         }
+
         tree_index++;
         t_left = t_right;
     }
 out:
-    /* Can't use msp_safe_free here because of restrict */
     if (parent != NULL) {
         free(parent);
     }
-    tsk_safe_free(total_counts);
+    if (right_child != NULL) {
+        free(right_child);
+    }
+    if (left_sib != NULL) {
+        free(left_sib);
+    }
+    if (right_sib != NULL) {
+        free(right_sib);
+    }
     return ret;
 }
 
-static int TSK_WARN_UNUSED
-tsk_treeseq_update_branch_afs(const tsk_treeseq_t *self, tsk_id_t u, double right,
-    const double *restrict branch_length, double *restrict last_update,
-    const double *counts, tsk_size_t num_sample_sets, tsk_size_t window_index,
-    const tsk_size_t *result_dims, tsk_flags_t options, double *result)
+static int
+tsk_treeseq_two_site_general_stat(const tsk_treeseq_t *self, tsk_size_t state_dim,
+    const double *sample_weights, tsk_size_t result_dim, general_stat_func_t *f,
+    sample_count_stat_params_t *f_params, norm_func_t *norm_f,
+    const double *TSK_UNUSED(left_window), const double *TSK_UNUSED(right_window),
+    tsk_flags_t options, tsk_size_t *result_size, double **result)
 {
     int ret = 0;
-    tsk_size_t afs_size;
-    tsk_size_t k;
-    double *afs;
-    tsk_size_t *coordinate = tsk_malloc(num_sample_sets * sizeof(*coordinate));
-    bool polarised = !!(options & TSK_STAT_POLARISED);
-    const double *count_row = GET_2D_ROW(counts, num_sample_sets + 1, u);
-    double x = (right - last_update[u]) * branch_length[u];
-    const tsk_size_t all_samples = (tsk_size_t) count_row[num_sample_sets];
-
-    if (coordinate == NULL) {
+    const tsk_size_t num_sites = self->tables->sites.num_rows;
+    const tsk_size_t num_samples = self->num_samples;
+    const tsk_size_t max_alleles = self->tables->mutations.num_rows + num_sites;
+    tsk_size_t num_sample_chunks = TSK_BIT_ARRAY_NUM_CHUNKS(num_samples);
+    tsk_size_t *restrict site_offsets = tsk_malloc(num_sites * sizeof(*site_offsets));
+    tsk_size_t *restrict num_alleles = tsk_malloc(num_sites * sizeof(*num_alleles));
+    tsk_bit_array_t *restrict sample_sets
+        = tsk_calloc(num_sample_chunks * state_dim, sizeof(*sample_sets));
+    tsk_bit_array_t *allele_samples
+        = tsk_calloc(max_alleles * num_sample_chunks, sizeof(*allele_samples));
+    tsk_bit_array_t all_samples_bits[num_sample_chunks];
+
+    if (site_offsets == NULL || num_alleles == NULL || sample_sets == NULL
+        || allele_samples == NULL) {
         ret = TSK_ERR_NO_MEMORY;
         goto out;
     }
 
-    if (0 < all_samples && all_samples < self->num_samples) {
-        if (!polarised) {
-            x *= 0.5;
-        }
-        afs_size = result_dims[num_sample_sets];
-        afs = result + afs_size * window_index;
-        for (k = 0; k < num_sample_sets; k++) {
-            coordinate[k] = (tsk_size_t) count_row[k];
-        }
-        if (!polarised) {
-            fold(coordinate, result_dims, num_sample_sets);
+    // A future improvement could get a union of all sample sets
+    // instead of all samples
+    get_all_samples_bits(all_samples_bits, num_samples, num_sample_chunks);
+
+    tsk_bit_array_t *allele_samples_row;
+    tsk_size_t num_alleles_cumsum = 0;
+    for (tsk_size_t t = 0; t < self->num_trees; t++) {
+        for (tsk_size_t s = 0; s < self->tree_sites_length[t]; s++) {
+            tsk_id_t site_id = self->tree_sites[t][s].id;
+            // Initialize the allele_samples with all samples in the ancestral allele
+            allele_samples_row
+                = GET_2D_ROW(allele_samples, num_sample_chunks, num_alleles_cumsum);
+            tsk_add_bit_arrays(allele_samples_row, all_samples_bits, num_sample_chunks);
+            // Store the allele offset for each site
+            site_offsets[site_id] = num_alleles_cumsum;
+            num_alleles_cumsum += self->site_mutations_length[site_id] + 1;
         }
-        increment_nd_array_value(afs, num_sample_sets, result_dims, coordinate, x);
     }
-    last_update[u] = right;
-out:
-    tsk_safe_free(coordinate);
-    return ret;
-}
-
-static int
-tsk_treeseq_branch_allele_frequency_spectrum(const tsk_treeseq_t *self,
-    tsk_size_t num_sample_sets, double *counts, tsk_size_t num_windows,
-    const double *windows, const tsk_size_t *result_dims, tsk_flags_t options,
-    double *result)
-{
-    int ret = 0;
-    tsk_id_t u, v;
-    tsk_size_t window_index;
-    tsk_size_t num_nodes = self->tables->nodes.num_rows;
-    const tsk_id_t num_edges = (tsk_id_t) self->tables->edges.num_rows;
-    const tsk_id_t *restrict I = self->tables->indexes.edge_insertion_order;
-    const tsk_id_t *restrict O = self->tables->indexes.edge_removal_order;
-    const double *restrict edge_left = self->tables->edges.left;
-    const double *restrict edge_right = self->tables->edges.right;
-    const tsk_id_t *restrict edge_parent = self->tables->edges.parent;
-    const tsk_id_t *restrict edge_child = self->tables->edges.child;
-    const double *restrict node_time = self->tables->nodes.time;
-    const double sequence_length = self->tables->sequence_length;
-    tsk_id_t *restrict parent = tsk_malloc(num_nodes * sizeof(*parent));
-    double *restrict last_update = tsk_calloc(num_nodes, sizeof(*last_update));
-    double *restrict branch_length = tsk_calloc(num_nodes, sizeof(*branch_length));
-    tsk_id_t tj, tk, h;
-    double t_left, t_right, w_right;
-    const tsk_size_t K = num_sample_sets + 1;
 
-    if (self->time_uncalibrated && !(options & TSK_STAT_ALLOW_TIME_UNCALIBRATED)) {
-        ret = TSK_ERR_TIME_UNCALIBRATED;
+    ret = get_all_mutation_samples(
+        self, num_sample_chunks, site_offsets, num_alleles, &allele_samples);
+    if (ret != 0) {
         goto out;
     }
 
-    if (parent == NULL || last_update == NULL) {
+    // Number of pairs w/ replacement (sites)
+    *result_size = (num_sites * (1 + num_sites)) >> (tsk_size_t) 1;
+    *result = tsk_calloc(*result_size * result_dim, sizeof(*result));
+
+    tsk_bit_array_t *sample_bits
+        = tsk_calloc(num_sample_chunks * state_dim, sizeof(*sample_bits));
+
+    if (sample_bits == NULL || result == NULL) {
         ret = TSK_ERR_NO_MEMORY;
         goto out;
     }
-    tsk_memset(parent, 0xff, num_nodes * sizeof(*parent));
-
-    /* Iterate over the trees */
-    tj = 0;
-    tk = 0;
-    t_left = 0;
-    window_index = 0;
-    while (tj < num_edges || t_left < sequence_length) {
-        tsk_bug_assert(window_index < num_windows);
-        while (tk < num_edges && edge_right[O[tk]] == t_left) {
-            h = O[tk];
-            tk++;
-            u = edge_child[h];
-            v = edge_parent[h];
-            ret = tsk_treeseq_update_branch_afs(self, u, t_left, branch_length,
-                last_update, counts, num_sample_sets, window_index, result_dims, options,
-                result);
-            if (ret != 0) {
-                goto out;
-            }
-            while (v != TSK_NULL) {
-                ret = tsk_treeseq_update_branch_afs(self, v, t_left, branch_length,
-                    last_update, counts, num_sample_sets, window_index, result_dims,
-                    options, result);
-                if (ret != 0) {
-                    goto out;
-                }
-                update_state(counts, K, v, u, -1);
-                v = parent[v];
-            }
-            parent[u] = TSK_NULL;
-            branch_length[u] = 0;
-        }
 
-        while (tj < num_edges && edge_left[I[tj]] == t_left) {
-            h = I[tj];
-            tj++;
-            u = edge_child[h];
-            v = edge_parent[h];
-            parent[u] = v;
-            branch_length[u] = node_time[v] - node_time[u];
-            while (v != TSK_NULL) {
-                ret = tsk_treeseq_update_branch_afs(self, v, t_left, branch_length,
-                    last_update, counts, num_sample_sets, window_index, result_dims,
-                    options, result);
-                if (ret != 0) {
-                    goto out;
-                }
-                update_state(counts, K, v, u, +1);
-                v = parent[v];
-            }
-        }
+    sample_weights_to_bit_array(
+        sample_weights, state_dim, num_samples, num_sample_chunks, &sample_bits);
+    bool polarised = false;
 
-        t_right = sequence_length;
-        if (tj < num_edges) {
-            t_right = TSK_MIN(t_right, edge_left[I[tj]]);
-        }
-        if (tk < num_edges) {
-            t_right = TSK_MIN(t_right, edge_right[O[tk]]);
-        }
+    if (options & TSK_STAT_POLARISED) {
+        polarised = true;
+    }
 
-        while (window_index < num_windows && windows[window_index + 1] <= t_right) {
-            w_right = windows[window_index + 1];
-            /* Flush the contributions of all nodes to the current window */
-            for (u = 0; u < (tsk_id_t) num_nodes; u++) {
-                tsk_bug_assert(last_update[u] < w_right);
-                ret = tsk_treeseq_update_branch_afs(self, u, w_right, branch_length,
-                    last_update, counts, num_sample_sets, window_index, result_dims,
-                    options, result);
-                if (ret != 0) {
-                    goto out;
-                }
+    // TODO: implement windows!
+    tsk_size_t inner = 0;
+    tsk_size_t result_offset = 0;
+    for (tsk_size_t site_a = 0; site_a < num_sites; site_a++) {
+        for (tsk_size_t site_b = inner; site_b < num_sites; site_b++) {
+            ret = compute_general_two_site_stat_result(site_a, site_offsets[site_a],
+                site_b, site_offsets[site_b], num_sample_chunks, num_alleles,
+                allele_samples, state_dim, sample_bits, result_dim, f, f_params, norm_f,
+                polarised, &((*result)[result_offset]));
+            if (ret != 0) {
+                goto out;
             }
-            window_index++;
+            result_offset += state_dim;
         }
-
-        t_left = t_right;
+        inner++;
     }
+
 out:
-    /* Can't use msp_safe_free here because of restrict */
-    if (parent != NULL) {
-        free(parent);
+    if (allele_samples != NULL) {
+        free(allele_samples);
     }
-    if (last_update != NULL) {
-        free(last_update);
+    if (site_offsets != NULL) {
+        free(site_offsets);
     }
-    if (branch_length != NULL) {
-        free(branch_length);
+    if (num_alleles != NULL) {
+        free(num_alleles);
     }
+    if (sample_sets != NULL) {
+        free(sample_sets);
+    }
+    tsk_safe_free(sample_bits);
     return ret;
 }
 
-int
-tsk_treeseq_allele_frequency_spectrum(const tsk_treeseq_t *self,
-    tsk_size_t num_sample_sets, const tsk_size_t *sample_set_sizes,
-    const tsk_id_t *sample_sets, tsk_size_t num_windows, const double *windows,
-    tsk_flags_t options, double *result)
+static int
+tsk_treeseq_two_locus_general_stat(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t result_dim, const tsk_id_t *set_indexes, general_stat_func_t *f,
+    norm_func_t *norm_f, tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result)
 {
     int ret = 0;
     bool stat_site = !!(options & TSK_STAT_SITE);
     bool stat_branch = !!(options & TSK_STAT_BRANCH);
-    bool stat_node = !!(options & TSK_STAT_NODE);
     double default_windows[] = { 0, self->tables->sequence_length };
-    const tsk_size_t num_nodes = self->tables->nodes.num_rows;
-    const tsk_size_t K = num_sample_sets + 1;
-    tsk_size_t j, k, l, afs_size;
-    tsk_id_t u;
-    tsk_size_t *result_dims = NULL;
-    /* These counts should really be ints, but we use doubles so that we can
-     * reuse code from the general_stats code paths. */
-    double *counts = NULL;
-    double *count_row;
 
-    if (stat_node) {
-        ret = TSK_ERR_UNSUPPORTED_STAT_MODE;
+    const tsk_size_t num_samples = self->num_samples;
+    double *weights = NULL;
+    tsk_size_t state_dim = num_sample_sets;
+    sample_count_stat_params_t f_params = { .sample_sets = sample_sets,
+        .num_sample_sets = num_sample_sets,
+        .sample_set_sizes = sample_set_sizes,
+        .set_indexes = set_indexes };
+
+    ret = tsk_treeseq_check_sample_sets(
+        self, num_sample_sets, sample_set_sizes, sample_sets);
+    if (ret != 0) {
+        goto out;
+    }
+    weights = tsk_calloc(num_samples * num_sample_sets, sizeof(*weights));
+    if (weights == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
+    }
+    ret = init_sample_weights(
+        self, num_sample_sets, sample_set_sizes, sample_sets, &weights);
+    if (ret != 0) {
         goto out;
     }
+
     /* If no mode is specified, we default to site mode */
     if (!(stat_site || stat_branch)) {
         stat_site = true;
@@ -2492,16 +2710,454 @@ tsk_treeseq_allele_frequency_spectrum(const tsk_treeseq_t *self,
         ret = TSK_ERR_MULTIPLE_STAT_MODES;
         goto out;
     }
-    if (windows == NULL) {
-        num_windows = 1;
-        windows = default_windows;
+
+    if (state_dim < 1) {
+        ret = TSK_ERR_BAD_STATE_DIMS;
+        goto out;
+    }
+    if (result_dim < 1) {
+        ret = TSK_ERR_BAD_RESULT_DIMS;
+        goto out;
+    }
+    if (left_windows == NULL) {
+        num_left_windows = 1;
+        left_windows = default_windows;
+        num_right_windows = 1;
+        right_windows = default_windows;
+    } else if (right_windows == NULL) {
+        ret = tsk_treeseq_check_windows(
+            self, num_left_windows, left_windows, TSK_REQUIRE_FULL_SPAN);
+        if (ret != 0) {
+            goto out;
+        }
+        num_right_windows = num_left_windows;
+        right_windows = left_windows;
     } else {
-        ret = tsk_treeseq_check_windows(self, num_windows, windows);
+        ret = tsk_treeseq_check_windows(
+            self, num_left_windows, left_windows, TSK_REQUIRE_FULL_SPAN);
         if (ret != 0) {
             goto out;
         }
-    }
-    ret = tsk_treeseq_check_sample_sets(
+        ret = tsk_treeseq_check_windows(
+            self, num_right_windows, right_windows, TSK_REQUIRE_FULL_SPAN);
+        if (ret != 0) {
+            goto out;
+        }
+    }
+
+    if (stat_site) {
+        // TODO: assert 1 window left/right
+        ret = tsk_treeseq_two_site_general_stat(self, state_dim, weights, result_dim, f,
+            &f_params, norm_f, left_windows, right_windows, options, result_size,
+            result);
+    } else {
+        // TODO: branch statistics
+        ret = TSK_ERR_GENERIC;
+    }
+
+out:
+    tsk_safe_free(weights);
+    return ret;
+}
+
+/***********************************
+ * Allele frequency spectrum
+ ***********************************/
+
+static inline void
+fold(tsk_size_t *restrict coordinate, const tsk_size_t *restrict dims,
+    tsk_size_t num_dims)
+{
+    tsk_size_t k;
+    double n = 0;
+    int s = 0;
+
+    for (k = 0; k < num_dims; k++) {
+        tsk_bug_assert(coordinate[k] < dims[k]);
+        n += (double) dims[k] - 1;
+        s += (int) coordinate[k];
+    }
+    n /= 2;
+    k = num_dims;
+    while (s == n && k > 0) {
+        k--;
+        n -= ((double) (dims[k] - 1)) / 2;
+        s -= (int) coordinate[k];
+    }
+    if (s > n) {
+        for (k = 0; k < num_dims; k++) {
+            s = (int) (dims[k] - 1 - coordinate[k]);
+            tsk_bug_assert(s >= 0);
+            coordinate[k] = (tsk_size_t) s;
+        }
+    }
+}
+
+static int
+tsk_treeseq_update_site_afs(const tsk_treeseq_t *self, const tsk_site_t *site,
+    const double *total_counts, const double *counts, tsk_size_t num_sample_sets,
+    tsk_size_t window_index, tsk_size_t *result_dims, tsk_flags_t options,
+    double *result)
+{
+    int ret = 0;
+    tsk_size_t afs_size;
+    tsk_size_t k, allele, num_alleles, all_samples;
+    double increment, *afs, *allele_counts, *allele_count;
+    tsk_size_t *coordinate = tsk_malloc(num_sample_sets * sizeof(*coordinate));
+    bool polarised = !!(options & TSK_STAT_POLARISED);
+    const tsk_size_t K = num_sample_sets + 1;
+
+    if (coordinate == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
+    }
+    ret = get_allele_weights(
+        site, counts, K, total_counts, &num_alleles, &allele_counts);
+    if (ret != 0) {
+        goto out;
+    }
+
+    afs_size = result_dims[num_sample_sets];
+    afs = result + afs_size * window_index;
+
+    increment = polarised ? 1 : 0.5;
+    /* Sum over the allele weights. Skip the ancestral state if polarised. */
+    for (allele = polarised ? 1 : 0; allele < num_alleles; allele++) {
+        allele_count = GET_2D_ROW(allele_counts, K, allele);
+        all_samples = (tsk_size_t) allele_count[num_sample_sets];
+        if (all_samples > 0 && all_samples < self->num_samples) {
+            for (k = 0; k < num_sample_sets; k++) {
+                coordinate[k] = (tsk_size_t) allele_count[k];
+            }
+            if (!polarised) {
+                fold(coordinate, result_dims, num_sample_sets);
+            }
+            increment_nd_array_value(
+                afs, num_sample_sets, result_dims, coordinate, increment);
+        }
+    }
+out:
+    tsk_safe_free(coordinate);
+    tsk_safe_free(allele_counts);
+    return ret;
+}
+
+static int
+tsk_treeseq_site_allele_frequency_spectrum(const tsk_treeseq_t *self,
+    tsk_size_t num_sample_sets, const tsk_size_t *sample_set_sizes, double *counts,
+    tsk_size_t num_windows, const double *windows, tsk_size_t *result_dims,
+    tsk_flags_t options, double *result)
+{
+    int ret = 0;
+    tsk_id_t u, v;
+    tsk_size_t tree_site, tree_index, window_index;
+    tsk_size_t num_nodes = self->tables->nodes.num_rows;
+    const tsk_id_t num_edges = (tsk_id_t) self->tables->edges.num_rows;
+    const tsk_id_t *restrict I = self->tables->indexes.edge_insertion_order;
+    const tsk_id_t *restrict O = self->tables->indexes.edge_removal_order;
+    const double *restrict edge_left = self->tables->edges.left;
+    const double *restrict edge_right = self->tables->edges.right;
+    const tsk_id_t *restrict edge_parent = self->tables->edges.parent;
+    const tsk_id_t *restrict edge_child = self->tables->edges.child;
+    const double sequence_length = self->tables->sequence_length;
+    tsk_id_t *restrict parent = tsk_malloc(num_nodes * sizeof(*parent));
+    tsk_site_t *site;
+    tsk_id_t tj, tk, h;
+    tsk_size_t j;
+    const tsk_size_t K = num_sample_sets + 1;
+    double t_left, t_right;
+    double *total_counts = tsk_malloc((1 + num_sample_sets) * sizeof(*total_counts));
+
+    if (parent == NULL || total_counts == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
+    }
+    tsk_memset(parent, 0xff, num_nodes * sizeof(*parent));
+
+    for (j = 0; j < num_sample_sets; j++) {
+        total_counts[j] = (double) sample_set_sizes[j];
+    }
+    total_counts[num_sample_sets] = (double) self->num_samples;
+
+    /* Iterate over the trees */
+    tj = 0;
+    tk = 0;
+    t_left = 0;
+    tree_index = 0;
+    window_index = 0;
+    while (tj < num_edges || t_left < sequence_length) {
+        while (tk < num_edges && edge_right[O[tk]] == t_left) {
+            h = O[tk];
+            tk++;
+            u = edge_child[h];
+            v = edge_parent[h];
+            while (v != TSK_NULL) {
+                update_state(counts, K, v, u, -1);
+                v = parent[v];
+            }
+            parent[u] = TSK_NULL;
+        }
+
+        while (tj < num_edges && edge_left[I[tj]] == t_left) {
+            h = I[tj];
+            tj++;
+            u = edge_child[h];
+            v = edge_parent[h];
+            parent[u] = v;
+            while (v != TSK_NULL) {
+                update_state(counts, K, v, u, +1);
+                v = parent[v];
+            }
+        }
+        t_right = sequence_length;
+        if (tj < num_edges) {
+            t_right = TSK_MIN(t_right, edge_left[I[tj]]);
+        }
+        if (tk < num_edges) {
+            t_right = TSK_MIN(t_right, edge_right[O[tk]]);
+        }
+
+        /* Update the sites */
+        for (tree_site = 0; tree_site < self->tree_sites_length[tree_index];
+             tree_site++) {
+            site = self->tree_sites[tree_index] + tree_site;
+            while (windows[window_index + 1] <= site->position) {
+                window_index++;
+                tsk_bug_assert(window_index < num_windows);
+            }
+            ret = tsk_treeseq_update_site_afs(self, site, total_counts, counts,
+                num_sample_sets, window_index, result_dims, options, result);
+            if (ret != 0) {
+                goto out;
+            }
+            tsk_bug_assert(windows[window_index] <= site->position);
+            tsk_bug_assert(site->position < windows[window_index + 1]);
+        }
+        tree_index++;
+        t_left = t_right;
+    }
+out:
+    /* Can't use msp_safe_free here because of restrict */
+    if (parent != NULL) {
+        free(parent);
+    }
+    tsk_safe_free(total_counts);
+    return ret;
+}
+
+static int TSK_WARN_UNUSED
+tsk_treeseq_update_branch_afs(const tsk_treeseq_t *self, tsk_id_t u, double right,
+    const double *restrict branch_length, double *restrict last_update,
+    const double *counts, tsk_size_t num_sample_sets, tsk_size_t window_index,
+    const tsk_size_t *result_dims, tsk_flags_t options, double *result)
+{
+    int ret = 0;
+    tsk_size_t afs_size;
+    tsk_size_t k;
+    double *afs;
+    tsk_size_t *coordinate = tsk_malloc(num_sample_sets * sizeof(*coordinate));
+    bool polarised = !!(options & TSK_STAT_POLARISED);
+    const double *count_row = GET_2D_ROW(counts, num_sample_sets + 1, u);
+    double x = (right - last_update[u]) * branch_length[u];
+    const tsk_size_t all_samples = (tsk_size_t) count_row[num_sample_sets];
+
+    if (coordinate == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
+    }
+
+    if (0 < all_samples && all_samples < self->num_samples) {
+        if (!polarised) {
+            x *= 0.5;
+        }
+        afs_size = result_dims[num_sample_sets];
+        afs = result + afs_size * window_index;
+        for (k = 0; k < num_sample_sets; k++) {
+            coordinate[k] = (tsk_size_t) count_row[k];
+        }
+        if (!polarised) {
+            fold(coordinate, result_dims, num_sample_sets);
+        }
+        increment_nd_array_value(afs, num_sample_sets, result_dims, coordinate, x);
+    }
+    last_update[u] = right;
+out:
+    tsk_safe_free(coordinate);
+    return ret;
+}
+
+static int
+tsk_treeseq_branch_allele_frequency_spectrum(const tsk_treeseq_t *self,
+    tsk_size_t num_sample_sets, double *counts, tsk_size_t num_windows,
+    const double *windows, const tsk_size_t *result_dims, tsk_flags_t options,
+    double *result)
+{
+    int ret = 0;
+    tsk_id_t u, v;
+    tsk_size_t window_index;
+    tsk_size_t num_nodes = self->tables->nodes.num_rows;
+    const tsk_id_t num_edges = (tsk_id_t) self->tables->edges.num_rows;
+    const tsk_id_t *restrict I = self->tables->indexes.edge_insertion_order;
+    const tsk_id_t *restrict O = self->tables->indexes.edge_removal_order;
+    const double *restrict edge_left = self->tables->edges.left;
+    const double *restrict edge_right = self->tables->edges.right;
+    const tsk_id_t *restrict edge_parent = self->tables->edges.parent;
+    const tsk_id_t *restrict edge_child = self->tables->edges.child;
+    const double *restrict node_time = self->tables->nodes.time;
+    const double sequence_length = self->tables->sequence_length;
+    tsk_id_t *restrict parent = tsk_malloc(num_nodes * sizeof(*parent));
+    double *restrict last_update = tsk_calloc(num_nodes, sizeof(*last_update));
+    double *restrict branch_length = tsk_calloc(num_nodes, sizeof(*branch_length));
+    tsk_id_t tj, tk, h;
+    double t_left, t_right, w_right;
+    const tsk_size_t K = num_sample_sets + 1;
+
+    if (self->time_uncalibrated && !(options & TSK_STAT_ALLOW_TIME_UNCALIBRATED)) {
+        ret = TSK_ERR_TIME_UNCALIBRATED;
+        goto out;
+    }
+
+    if (parent == NULL || last_update == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
+    }
+    tsk_memset(parent, 0xff, num_nodes * sizeof(*parent));
+
+    /* Iterate over the trees */
+    tj = 0;
+    tk = 0;
+    t_left = 0;
+    window_index = 0;
+    while (tj < num_edges || t_left < sequence_length) {
+        tsk_bug_assert(window_index < num_windows);
+        while (tk < num_edges && edge_right[O[tk]] == t_left) {
+            h = O[tk];
+            tk++;
+            u = edge_child[h];
+            v = edge_parent[h];
+            ret = tsk_treeseq_update_branch_afs(self, u, t_left, branch_length,
+                last_update, counts, num_sample_sets, window_index, result_dims, options,
+                result);
+            if (ret != 0) {
+                goto out;
+            }
+            while (v != TSK_NULL) {
+                ret = tsk_treeseq_update_branch_afs(self, v, t_left, branch_length,
+                    last_update, counts, num_sample_sets, window_index, result_dims,
+                    options, result);
+                if (ret != 0) {
+                    goto out;
+                }
+                update_state(counts, K, v, u, -1);
+                v = parent[v];
+            }
+            parent[u] = TSK_NULL;
+            branch_length[u] = 0;
+        }
+
+        while (tj < num_edges && edge_left[I[tj]] == t_left) {
+            h = I[tj];
+            tj++;
+            u = edge_child[h];
+            v = edge_parent[h];
+            parent[u] = v;
+            branch_length[u] = node_time[v] - node_time[u];
+            while (v != TSK_NULL) {
+                ret = tsk_treeseq_update_branch_afs(self, v, t_left, branch_length,
+                    last_update, counts, num_sample_sets, window_index, result_dims,
+                    options, result);
+                if (ret != 0) {
+                    goto out;
+                }
+                update_state(counts, K, v, u, +1);
+                v = parent[v];
+            }
+        }
+
+        t_right = sequence_length;
+        if (tj < num_edges) {
+            t_right = TSK_MIN(t_right, edge_left[I[tj]]);
+        }
+        if (tk < num_edges) {
+            t_right = TSK_MIN(t_right, edge_right[O[tk]]);
+        }
+
+        while (window_index < num_windows && windows[window_index + 1] <= t_right) {
+            w_right = windows[window_index + 1];
+            /* Flush the contributions of all nodes to the current window */
+            for (u = 0; u < (tsk_id_t) num_nodes; u++) {
+                tsk_bug_assert(last_update[u] < w_right);
+                ret = tsk_treeseq_update_branch_afs(self, u, w_right, branch_length,
+                    last_update, counts, num_sample_sets, window_index, result_dims,
+                    options, result);
+                if (ret != 0) {
+                    goto out;
+                }
+            }
+            window_index++;
+        }
+
+        t_left = t_right;
+    }
+out:
+    /* Can't use msp_safe_free here because of restrict */
+    if (parent != NULL) {
+        free(parent);
+    }
+    if (last_update != NULL) {
+        free(last_update);
+    }
+    if (branch_length != NULL) {
+        free(branch_length);
+    }
+    return ret;
+}
+
+int
+tsk_treeseq_allele_frequency_spectrum(const tsk_treeseq_t *self,
+    tsk_size_t num_sample_sets, const tsk_size_t *sample_set_sizes,
+    const tsk_id_t *sample_sets, tsk_size_t num_windows, const double *windows,
+    tsk_flags_t options, double *result)
+{
+    int ret = 0;
+    bool stat_site = !!(options & TSK_STAT_SITE);
+    bool stat_branch = !!(options & TSK_STAT_BRANCH);
+    bool stat_node = !!(options & TSK_STAT_NODE);
+    const double default_windows[] = { 0, self->tables->sequence_length };
+    const tsk_size_t num_nodes = self->tables->nodes.num_rows;
+    const tsk_size_t K = num_sample_sets + 1;
+    tsk_size_t j, k, l, afs_size;
+    tsk_id_t u;
+    tsk_size_t *result_dims = NULL;
+    /* These counts should really be ints, but we use doubles so that we can
+     * reuse code from the general_stats code paths. */
+    double *counts = NULL;
+    double *count_row;
+
+    if (stat_node) {
+        ret = TSK_ERR_UNSUPPORTED_STAT_MODE;
+        goto out;
+    }
+    /* If no mode is specified, we default to site mode */
+    if (!(stat_site || stat_branch)) {
+        stat_site = true;
+    }
+    /* It's an error to specify more than one mode */
+    if (stat_site + stat_branch > 1) {
+        ret = TSK_ERR_MULTIPLE_STAT_MODES;
+        goto out;
+    }
+    if (windows == NULL) {
+        num_windows = 1;
+        windows = default_windows;
+    } else {
+        ret = tsk_treeseq_check_windows(
+            self, num_windows, windows, TSK_REQUIRE_FULL_SPAN);
+        if (ret != 0) {
+            goto out;
+        }
+    }
+    ret = tsk_treeseq_check_sample_sets(
         self, num_sample_sets, sample_set_sizes, sample_sets);
     if (ret != 0) {
         goto out;
@@ -2619,6 +3275,10 @@ tsk_treeseq_trait_covariance(const tsk_treeseq_t *self, tsk_size_t num_weights,
         ret = TSK_ERR_NO_MEMORY;
         goto out;
     }
+    if (num_weights == 0) {
+        ret = TSK_ERR_INSUFFICIENT_WEIGHTS;
+        goto out;
+    }
 
     // center weights
     for (j = 0; j < num_samples; j++) {
@@ -2690,7 +3350,7 @@ tsk_treeseq_trait_correlation(const tsk_treeseq_t *self, tsk_size_t num_weights,
     }
 
     if (num_weights < 1) {
-        ret = TSK_ERR_BAD_STATE_DIMS;
+        ret = TSK_ERR_INSUFFICIENT_WEIGHTS;
         goto out;
     }
 
@@ -2803,7 +3463,7 @@ tsk_treeseq_trait_linear_model(const tsk_treeseq_t *self, tsk_size_t num_weights
     }
 
     if (num_weights < 1) {
-        ret = TSK_ERR_BAD_STATE_DIMS;
+        ret = TSK_ERR_INSUFFICIENT_WEIGHTS;
         goto out;
     }
 
@@ -2829,73 +3489,342 @@ tsk_treeseq_trait_linear_model(const tsk_treeseq_t *self, tsk_size_t num_weights
         for (i = 0; i < num_covariates; i++) {
             new_row[i + num_weights] = z[i];
         }
-        // set final row to 1 to count alleles
-        new_row[num_weights + num_covariates] = 1.0;
+        // set final row to 1 to count alleles
+        new_row[num_weights + num_covariates] = 1.0;
+    }
+
+    ret = tsk_treeseq_general_stat(self, num_weights + num_covariates + 1, new_weights,
+        num_weights, trait_linear_model_summary_func, &args, num_windows, windows,
+        options, result);
+
+out:
+    tsk_safe_free(V);
+    tsk_safe_free(new_weights);
+    return ret;
+}
+
+static int
+segregating_sites_summary_func(tsk_size_t state_dim, const double *state,
+    tsk_size_t TSK_UNUSED(result_dim), double *result, void *params)
+{
+    sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
+    const double *x = state;
+    double n;
+    tsk_size_t j;
+
+    // this works because sum_{i=1}^k (1-p_i) = k-1
+    for (j = 0; j < state_dim; j++) {
+        n = (double) args.sample_set_sizes[j];
+        result[j] = (x[j] > 0) * (1 - x[j] / n);
+    }
+    return 0;
+}
+
+int
+tsk_treeseq_segregating_sites(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_windows, const double *windows, tsk_flags_t options, double *result)
+{
+    return tsk_treeseq_sample_count_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, segregating_sites_summary_func, num_windows,
+        windows, options, result);
+}
+
+static int
+Y1_summary_func(tsk_size_t TSK_UNUSED(state_dim), const double *state,
+    tsk_size_t result_dim, double *result, void *params)
+{
+    sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
+    const double *x = state;
+    double ni, denom, numer;
+    tsk_size_t i;
+
+    for (i = 0; i < result_dim; i++) {
+        ni = (double) args.sample_set_sizes[i];
+        denom = ni * (ni - 1) * (ni - 2);
+        numer = x[i] * (ni - x[i]) * (ni - x[i] - 1);
+        result[i] = numer / denom;
+    }
+    return 0;
+}
+
+int
+tsk_treeseq_Y1(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_windows, const double *windows, tsk_flags_t options, double *result)
+{
+    return tsk_treeseq_sample_count_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, Y1_summary_func, num_windows, windows,
+        options, result);
+}
+
+static int
+D_summary_func(tsk_size_t state_dim, const double *state,
+    tsk_size_t TSK_UNUSED(result_dim), double *result, void *params)
+{
+    sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
+    double n;
+    const double *state_row;
+    for (tsk_size_t j = 0; j < state_dim; j++) {
+        n = (double) args.sample_set_sizes[j];
+        state_row = GET_2D_ROW(state, 3, j);
+        double p_AB = state_row[0] / n;
+        double p_Ab = state_row[1] / n;
+        double p_aB = state_row[2] / n;
+
+        double p_A = p_AB + p_Ab;
+        double p_B = p_AB + p_aB;
+        result[j] = p_AB - (p_A * p_B);
+    }
+
+    return 0;
+}
+
+int
+tsk_treeseq_D(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result)
+{
+    options |= TSK_STAT_POLARISED; // TODO: allow user to pick?
+    return tsk_treeseq_two_locus_general_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, D_summary_func, norm_total_weighted,
+        num_left_windows, left_windows, num_right_windows, right_windows, options,
+        result_size, result);
+}
+
+static int
+D2_summary_func(tsk_size_t state_dim, const double *state,
+    tsk_size_t TSK_UNUSED(result_dim), double *result, void *params)
+{
+    sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
+    double n;
+    const double *state_row;
+    for (tsk_size_t j = 0; j < state_dim; j++) {
+        n = (double) args.sample_set_sizes[j];
+        state_row = GET_2D_ROW(state, 3, j);
+        double p_AB = state_row[0] / n;
+        double p_Ab = state_row[1] / n;
+        double p_aB = state_row[2] / n;
+
+        double p_A = p_AB + p_Ab;
+        double p_B = p_AB + p_aB;
+        result[j] = p_AB - (p_A * p_B);
+        result[j] *= result[j];
+    }
+
+    return 0;
+}
+
+int
+tsk_treeseq_D2(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result)
+{
+    return tsk_treeseq_two_locus_general_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, D2_summary_func, norm_total_weighted,
+        num_left_windows, left_windows, num_right_windows, right_windows, options,
+        result_size, result);
+}
+
+static int
+r2_summary_func(tsk_size_t state_dim, const double *state,
+    tsk_size_t TSK_UNUSED(result_dim), double *result, void *params)
+{
+    sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
+    double n;
+    const double *state_row;
+    for (tsk_size_t j = 0; j < state_dim; j++) {
+        n = (double) args.sample_set_sizes[j];
+        state_row = GET_2D_ROW(state, 3, j);
+        double p_AB = state_row[0] / n;
+        double p_Ab = state_row[1] / n;
+        double p_aB = state_row[2] / n;
+
+        double p_A = p_AB + p_Ab;
+        double p_B = p_AB + p_aB;
+
+        double D_ = p_AB - (p_A * p_B);
+        double denom = p_A * p_B * (1 - p_A) * (1 - p_B);
+
+        if (denom == 0 && D_ == 0) {
+            result[j] = 0;
+        } else {
+            result[j] = (D_ * D_) / denom;
+        }
+    }
+    return 0;
+}
+
+int
+tsk_treeseq_r2(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result)
+{
+    return tsk_treeseq_two_locus_general_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, r2_summary_func, norm_hap_weighted,
+        num_left_windows, left_windows, num_right_windows, right_windows, options,
+        result_size, result);
+}
+
+static int
+D_prime_summary_func(tsk_size_t state_dim, const double *state,
+    tsk_size_t TSK_UNUSED(result_dim), double *result, void *params)
+{
+    sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
+    double n;
+    const double *state_row;
+    for (tsk_size_t j = 0; j < state_dim; j++) {
+        n = (double) args.sample_set_sizes[j];
+        state_row = GET_2D_ROW(state, 3, j);
+        double p_AB = state_row[0] / n;
+        double p_Ab = state_row[1] / n;
+        double p_aB = state_row[2] / n;
+
+        double p_A = p_AB + p_Ab;
+        double p_B = p_AB + p_aB;
+
+        double D_ = p_AB - (p_A * p_B);
+        if (D_ >= 0) {
+            result[j] = D_ / TSK_MIN(p_A * (1 - p_B), (1 - p_A) * p_B);
+        } else {
+            result[j] = D_ / TSK_MIN(p_A * p_B, (1 - p_A) * (1 - p_B));
+        }
+    }
+    return 0;
+}
+
+int
+tsk_treeseq_D_prime(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result)
+{
+    options |= TSK_STAT_POLARISED; // TODO: allow user to pick?
+    return tsk_treeseq_two_locus_general_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, D_prime_summary_func, norm_hap_weighted,
+        num_left_windows, left_windows, num_right_windows, right_windows, options,
+        result_size, result);
+}
+
+static int
+r_summary_func(tsk_size_t state_dim, const double *state,
+    tsk_size_t TSK_UNUSED(result_dim), double *result, void *params)
+{
+    sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
+    double n;
+    const double *state_row;
+    for (tsk_size_t j = 0; j < state_dim; j++) {
+        n = (double) args.sample_set_sizes[j];
+        state_row = GET_2D_ROW(state, 3, j);
+        double p_AB = state_row[0] / n;
+        double p_Ab = state_row[1] / n;
+        double p_aB = state_row[2] / n;
+
+        double p_A = p_AB + p_Ab;
+        double p_B = p_AB + p_aB;
+
+        double D_ = p_AB - (p_A * p_B);
+        double denom = p_A * p_B * (1 - p_A) * (1 - p_B);
+
+        if (denom == 0 && D_ == 0) {
+            result[j] = 0;
+        } else {
+            result[j] = D_ / sqrt(denom);
+        }
     }
+    return 0;
+}
 
-    ret = tsk_treeseq_general_stat(self, num_weights + num_covariates + 1, new_weights,
-        num_weights, trait_linear_model_summary_func, &args, num_windows, windows,
-        options, result);
-
-out:
-    tsk_safe_free(V);
-    tsk_safe_free(new_weights);
-    return ret;
+int
+tsk_treeseq_r(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result)
+{
+    options |= TSK_STAT_POLARISED; // TODO: allow user to pick?
+    return tsk_treeseq_two_locus_general_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, r_summary_func, norm_total_weighted,
+        num_left_windows, left_windows, num_right_windows, right_windows, options,
+        result_size, result);
 }
 
 static int
-segregating_sites_summary_func(tsk_size_t state_dim, const double *state,
+Dz_summary_func(tsk_size_t state_dim, const double *state,
     tsk_size_t TSK_UNUSED(result_dim), double *result, void *params)
 {
     sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
-    const double *x = state;
     double n;
-    tsk_size_t j;
-
-    // this works because sum_{i=1}^k (1-p_i) = k-1
-    for (j = 0; j < state_dim; j++) {
+    const double *state_row;
+    for (tsk_size_t j = 0; j < state_dim; j++) {
         n = (double) args.sample_set_sizes[j];
-        result[j] = (x[j] > 0) * (1 - x[j] / n);
+        state_row = GET_2D_ROW(state, 3, j);
+        double p_AB = state_row[0] / n;
+        double p_Ab = state_row[1] / n;
+        double p_aB = state_row[2] / n;
+
+        double p_A = p_AB + p_Ab;
+        double p_B = p_AB + p_aB;
+
+        double D_ = p_AB - (p_A * p_B);
+
+        result[j] = D_ * (1 - 2 * p_A) * (1 - 2 * p_B);
     }
     return 0;
 }
 
 int
-tsk_treeseq_segregating_sites(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+tsk_treeseq_Dz(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
     const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
-    tsk_size_t num_windows, const double *windows, tsk_flags_t options, double *result)
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result)
 {
-    return tsk_treeseq_sample_count_stat(self, num_sample_sets, sample_set_sizes,
-        sample_sets, num_sample_sets, NULL, segregating_sites_summary_func, num_windows,
-        windows, options, result);
+    return tsk_treeseq_two_locus_general_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, Dz_summary_func, norm_total_weighted,
+        num_left_windows, left_windows, num_right_windows, right_windows, options,
+        result_size, result);
 }
 
 static int
-Y1_summary_func(tsk_size_t TSK_UNUSED(state_dim), const double *state,
-    tsk_size_t result_dim, double *result, void *params)
+pi2_summary_func(tsk_size_t state_dim, const double *state,
+    tsk_size_t TSK_UNUSED(result_dim), double *result, void *params)
 {
     sample_count_stat_params_t args = *(sample_count_stat_params_t *) params;
-    const double *x = state;
-    double ni, denom, numer;
-    tsk_size_t i;
+    double n;
+    const double *state_row;
+    for (tsk_size_t j = 0; j < state_dim; j++) {
+        n = (double) args.sample_set_sizes[j];
+        state_row = GET_2D_ROW(state, 3, j);
+        double p_AB = state_row[0] / n;
+        double p_Ab = state_row[1] / n;
+        double p_aB = state_row[2] / n;
 
-    for (i = 0; i < result_dim; i++) {
-        ni = (double) args.sample_set_sizes[i];
-        denom = ni * (ni - 1) * (ni - 2);
-        numer = x[i] * (ni - x[i]) * (ni - x[i] - 1);
-        result[i] = numer / denom;
+        double p_A = p_AB + p_Ab;
+        double p_B = p_AB + p_aB;
+        result[j] = p_A * (1 - p_A) * p_B * (1 - p_B);
     }
     return 0;
 }
 
 int
-tsk_treeseq_Y1(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+tsk_treeseq_pi2(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
     const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
-    tsk_size_t num_windows, const double *windows, tsk_flags_t options, double *result)
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result)
 {
-    return tsk_treeseq_sample_count_stat(self, num_sample_sets, sample_set_sizes,
-        sample_sets, num_sample_sets, NULL, Y1_summary_func, num_windows, windows,
-        options, result);
+    return tsk_treeseq_two_locus_general_stat(self, num_sample_sets, sample_set_sizes,
+        sample_sets, num_sample_sets, NULL, pi2_summary_func, norm_total_weighted,
+        num_left_windows, left_windows, num_right_windows, right_windows, options,
+        result_size, result);
 }
 
 /***********************************
@@ -3010,6 +3939,79 @@ out:
     return ret;
 }
 
+static int
+genetic_relatedness_weighted_summary_func(tsk_size_t state_dim, const double *state,
+    tsk_size_t result_dim, double *result, void *params)
+{
+    indexed_weight_stat_params_t args = *(indexed_weight_stat_params_t *) params;
+    const double *x = state;
+    tsk_id_t i, j;
+    tsk_size_t k;
+    double meanx, ni, nj;
+
+    meanx = state[state_dim - 1] / args.total_weights[state_dim - 1];
+    for (k = 0; k < result_dim; k++) {
+        i = args.index_tuples[2 * k];
+        j = args.index_tuples[2 * k + 1];
+        ni = args.total_weights[i];
+        nj = args.total_weights[j];
+        result[k] = (x[i] - ni * meanx) * (x[j] - nj * meanx) / 2;
+    }
+    return 0;
+}
+
+int
+tsk_treeseq_genetic_relatedness_weighted(const tsk_treeseq_t *self,
+    tsk_size_t num_weights, const double *weights, tsk_size_t num_index_tuples,
+    const tsk_id_t *index_tuples, tsk_size_t num_windows, const double *windows,
+    double *result, tsk_flags_t options)
+{
+    int ret = 0;
+    tsk_size_t num_samples = self->num_samples;
+    size_t j, k;
+    indexed_weight_stat_params_t args;
+    const double *row;
+    double *new_row;
+    double *total_weights = tsk_calloc((num_weights + 1), sizeof(*total_weights));
+    double *new_weights
+        = tsk_malloc((num_weights + 1) * num_samples * sizeof(*new_weights));
+
+    if (total_weights == NULL || new_weights == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
+    }
+    if (num_weights == 0) {
+        ret = TSK_ERR_INSUFFICIENT_WEIGHTS;
+        goto out;
+    }
+
+    // Add a column of ones to W
+    for (j = 0; j < num_samples; j++) {
+        row = GET_2D_ROW(weights, num_weights, j);
+        new_row = GET_2D_ROW(new_weights, num_weights + 1, j);
+        for (k = 0; k < num_weights; k++) {
+            new_row[k] = row[k];
+            total_weights[k] += row[k];
+        }
+        new_row[num_weights] = 1.0;
+    }
+    total_weights[num_weights] = (double) num_samples;
+
+    args.total_weights = total_weights;
+    args.index_tuples = index_tuples;
+    ret = tsk_treeseq_general_stat(self, num_weights + 1, new_weights, num_index_tuples,
+        genetic_relatedness_weighted_summary_func, &args, num_windows, windows, options,
+        result);
+    if (ret != 0) {
+        goto out;
+    }
+
+out:
+    tsk_safe_free(total_weights);
+    tsk_safe_free(new_weights);
+    return ret;
+}
+
 static int
 Y2_summary_func(tsk_size_t TSK_UNUSED(state_dim), const double *state,
     tsk_size_t result_dim, double *result, void *params)
@@ -3331,7 +4333,7 @@ tsk_treeseq_simplify(const tsk_treeseq_t *self, const tsk_id_t *samples,
     }
     ret = tsk_treeseq_init(
         output, tables, TSK_TS_INIT_BUILD_INDEXES | TSK_TAKE_OWNERSHIP);
-    /* Once tsk_tree_init has returned ownership of tables is transferred */
+    /* Once tsk_treeseq_init has returned ownership of tables is transferred */
     tables = NULL;
 out:
     if (tables != NULL) {
@@ -3460,6 +4462,20 @@ out:
  * Tree
  * ======================================================== */
 
+/* Return the root for the specified node.
+ * NOTE: no bounds checking is done here.
+ */
+static tsk_id_t
+tsk_tree_get_node_root(const tsk_tree_t *self, tsk_id_t u)
+{
+    const tsk_id_t *restrict parent = self->parent;
+
+    while (parent[u] != TSK_NULL) {
+        u = parent[u];
+    }
+    return u;
+}
+
 int TSK_WARN_UNUSED
 tsk_tree_init(tsk_tree_t *self, const tsk_treeseq_t *tree_sequence, tsk_flags_t options)
 {
@@ -4609,7 +5625,7 @@ tsk_tree_seek_from_null(tsk_tree_t *self, double x, tsk_flags_t TSK_UNUSED(optio
         for (edge = 0; edge < num_edges; edge++) {
             e = removal[num_edges - edge - 1];
             if (edge_right[e] < x) {
-                j = (tsk_id_t)(num_edges - edge - 1);
+                j = (tsk_id_t) (num_edges - edge - 1);
                 while (j < (tsk_id_t) num_edges && edge_left[insertion[j]] <= x) {
                     j++;
                 }
@@ -5402,7 +6418,7 @@ tsk_tree_map_mutations(tsk_tree_t *self, int32_t *genotypes,
             ret = TSK_ERR_BAD_ANCESTRAL_STATE;
             goto out;
         } else if (ancestral_state >= num_alleles) {
-            num_alleles = (int32_t)(ancestral_state + 1);
+            num_alleles = (int32_t) (ancestral_state + 1);
         }
     }
 
@@ -5512,8 +6528,8 @@ kc_vectors_alloc(kc_vectors *self, tsk_id_t n)
 
     self->n = n;
     self->N = (n * (n - 1)) / 2;
-    self->m = tsk_calloc((size_t)(self->N + self->n), sizeof(*self->m));
-    self->M = tsk_calloc((size_t)(self->N + self->n), sizeof(*self->M));
+    self->m = tsk_calloc((size_t) (self->N + self->n), sizeof(*self->m));
+    self->M = tsk_calloc((size_t) (self->N + self->n), sizeof(*self->M));
     if (self->m == NULL || self->M == NULL) {
         ret = TSK_ERR_NO_MEMORY;
         goto out;
@@ -5686,326 +6702,849 @@ out:
 }
 
 static int
-check_kc_distance_samples_inputs(const tsk_treeseq_t *self, const tsk_treeseq_t *other)
+check_kc_distance_samples_inputs(const tsk_treeseq_t *self, const tsk_treeseq_t *other)
+{
+    const tsk_id_t *samples, *other_samples;
+    tsk_id_t i, n;
+    int ret = 0;
+
+    if (self->num_samples != other->num_samples) {
+        ret = TSK_ERR_SAMPLE_SIZE_MISMATCH;
+        goto out;
+    }
+
+    samples = self->samples;
+    other_samples = other->samples;
+    n = (tsk_id_t) self->num_samples;
+    for (i = 0; i < n; i++) {
+        if (samples[i] != other_samples[i]) {
+            ret = TSK_ERR_SAMPLES_NOT_EQUAL;
+            goto out;
+        }
+    }
+out:
+    return ret;
+}
+
+int
+tsk_tree_kc_distance(
+    const tsk_tree_t *self, const tsk_tree_t *other, double lambda, double *result)
+{
+    tsk_id_t n, i;
+    kc_vectors vecs[2];
+    const tsk_tree_t *trees[2] = { self, other };
+    int ret = 0;
+
+    for (i = 0; i < 2; i++) {
+        tsk_memset(&vecs[i], 0, sizeof(kc_vectors));
+    }
+
+    ret = check_kc_distance_samples_inputs(self->tree_sequence, other->tree_sequence);
+    if (ret != 0) {
+        goto out;
+    }
+    for (i = 0; i < 2; i++) {
+        ret = check_kc_distance_tree_inputs(trees[i]);
+        if (ret != 0) {
+            goto out;
+        }
+    }
+
+    n = (tsk_id_t) self->tree_sequence->num_samples;
+    for (i = 0; i < 2; i++) {
+        ret = kc_vectors_alloc(&vecs[i], n);
+        if (ret != 0) {
+            goto out;
+        }
+        ret = fill_kc_vectors(trees[i], &vecs[i]);
+        if (ret != 0) {
+            goto out;
+        }
+    }
+
+    *result = norm_kc_vectors(&vecs[0], &vecs[1], lambda);
+out:
+    for (i = 0; i < 2; i++) {
+        kc_vectors_free(&vecs[i]);
+    }
+    return ret;
+}
+
+static int
+check_kc_distance_tree_sequence_inputs(
+    const tsk_treeseq_t *self, const tsk_treeseq_t *other)
+{
+    int ret = 0;
+
+    if (self->tables->sequence_length != other->tables->sequence_length) {
+        ret = TSK_ERR_SEQUENCE_LENGTH_MISMATCH;
+        goto out;
+    }
+
+    ret = check_kc_distance_samples_inputs(self, other);
+    if (ret != 0) {
+        goto out;
+    }
+
+out:
+    return ret;
+}
+
+static void
+update_kc_pair_with_sample(const tsk_tree_t *self, kc_vectors *kc, tsk_id_t sample,
+    tsk_size_t *depths, double root_time)
+{
+    tsk_id_t c, p, sib;
+    double time;
+    tsk_size_t depth;
+    double *times = self->tree_sequence->tables->nodes.time;
+
+    c = sample;
+    for (p = self->parent[sample]; p != TSK_NULL; p = self->parent[p]) {
+        time = root_time - times[p];
+        depth = depths[p];
+        for (sib = self->left_child[p]; sib != TSK_NULL; sib = self->right_sib[sib]) {
+            if (sib != c) {
+                update_kc_vectors_all_pairs(self, kc, sample, sib, depth, time);
+            }
+        }
+        c = p;
+    }
+}
+
+static int
+update_kc_subtree_state(
+    tsk_tree_t *t, kc_vectors *kc, tsk_id_t u, tsk_size_t *depths, double root_time)
+{
+    int stack_top;
+    tsk_id_t v, c;
+    tsk_id_t *stack = NULL;
+    int ret = 0;
+
+    stack = tsk_malloc(tsk_tree_get_size_bound(t) * sizeof(*stack));
+    if (stack == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
+    }
+
+    stack_top = 0;
+    stack[stack_top] = u;
+    while (stack_top >= 0) {
+        v = stack[stack_top];
+        stack_top--;
+
+        if (tsk_tree_is_sample(t, v)) {
+            update_kc_pair_with_sample(t, kc, v, depths, root_time);
+        }
+        for (c = t->left_child[v]; c != TSK_NULL; c = t->right_sib[c]) {
+            if (depths[c] != 0) {
+                depths[c] = depths[v] + 1;
+                stack_top++;
+                stack[stack_top] = c;
+            }
+        }
+    }
+
+out:
+    tsk_safe_free(stack);
+    return ret;
+}
+
+static int
+update_kc_incremental(tsk_tree_t *self, kc_vectors *kc, tsk_edge_list_t *edges_out,
+    tsk_edge_list_t *edges_in, tsk_size_t *depths)
 {
-    const tsk_id_t *samples, *other_samples;
-    tsk_id_t i, n;
     int ret = 0;
+    tsk_edge_list_node_t *record;
+    tsk_edge_t *e;
+    tsk_id_t u;
+    double root_time, time;
+    const double *times = self->tree_sequence->tables->nodes.time;
 
-    if (self->num_samples != other->num_samples) {
-        ret = TSK_ERR_SAMPLE_SIZE_MISMATCH;
-        goto out;
+    /* Update state of detached subtrees */
+    for (record = edges_out->tail; record != NULL; record = record->prev) {
+        e = &record->edge;
+        u = e->child;
+        depths[u] = 0;
+
+        if (self->parent[u] == TSK_NULL) {
+            root_time = times[tsk_tree_node_root(self, u)];
+            ret = update_kc_subtree_state(self, kc, u, depths, root_time);
+            if (ret != 0) {
+                goto out;
+            }
+        }
     }
 
-    samples = self->samples;
-    other_samples = other->samples;
-    n = (tsk_id_t) self->num_samples;
-    for (i = 0; i < n; i++) {
-        if (samples[i] != other_samples[i]) {
-            ret = TSK_ERR_SAMPLES_NOT_EQUAL;
+    /* Propagate state change down into reattached subtrees. */
+    for (record = edges_in->tail; record != NULL; record = record->prev) {
+        e = &record->edge;
+        u = e->child;
+
+        tsk_bug_assert(depths[e->child] == 0);
+        depths[u] = depths[e->parent] + 1;
+
+        root_time = times[tsk_tree_node_root(self, u)];
+        ret = update_kc_subtree_state(self, kc, u, depths, root_time);
+        if (ret != 0) {
             goto out;
         }
+
+        if (tsk_tree_is_sample(self, u)) {
+            time = tsk_tree_get_branch_length_unsafe(self, u);
+            update_kc_vectors_single_sample(self->tree_sequence, kc, u, time);
+        }
     }
+
 out:
     return ret;
 }
 
 int
-tsk_tree_kc_distance(
-    const tsk_tree_t *self, const tsk_tree_t *other, double lambda, double *result)
+tsk_treeseq_kc_distance(const tsk_treeseq_t *self, const tsk_treeseq_t *other,
+    double lambda_, double *result)
 {
-    tsk_id_t n, i;
-    kc_vectors vecs[2];
-    const tsk_tree_t *trees[2] = { self, other };
+    int i;
+    tsk_id_t n;
+    tsk_size_t num_nodes;
+    double left, span, total;
+    const tsk_treeseq_t *treeseqs[2] = { self, other };
+    tsk_tree_t trees[2];
+    kc_vectors kcs[2];
+    tsk_diff_iter_t diff_iters[2];
+    tsk_edge_list_t edges_out[2];
+    tsk_edge_list_t edges_in[2];
+    tsk_size_t *depths[2];
+    double t0_left, t0_right, t1_left, t1_right;
     int ret = 0;
 
     for (i = 0; i < 2; i++) {
-        tsk_memset(&vecs[i], 0, sizeof(kc_vectors));
+        tsk_memset(&trees[i], 0, sizeof(trees[i]));
+        tsk_memset(&diff_iters[i], 0, sizeof(diff_iters[i]));
+        tsk_memset(&kcs[i], 0, sizeof(kcs[i]));
+        tsk_memset(&edges_out[i], 0, sizeof(edges_out[i]));
+        tsk_memset(&edges_in[i], 0, sizeof(edges_in[i]));
+        depths[i] = NULL;
     }
 
-    ret = check_kc_distance_samples_inputs(self->tree_sequence, other->tree_sequence);
+    ret = check_kc_distance_tree_sequence_inputs(self, other);
     if (ret != 0) {
         goto out;
     }
+
+    n = (tsk_id_t) self->num_samples;
     for (i = 0; i < 2; i++) {
-        ret = check_kc_distance_tree_inputs(trees[i]);
+        ret = tsk_tree_init(&trees[i], treeseqs[i], TSK_SAMPLE_LISTS);
+        if (ret != 0) {
+            goto out;
+        }
+        ret = tsk_diff_iter_init_from_ts(&diff_iters[i], treeseqs[i], false);
+        if (ret != 0) {
+            goto out;
+        }
+        ret = kc_vectors_alloc(&kcs[i], n);
         if (ret != 0) {
             goto out;
         }
+        num_nodes = tsk_treeseq_get_num_nodes(treeseqs[i]);
+        depths[i] = tsk_calloc(num_nodes, sizeof(*depths[i]));
+        if (depths[i] == NULL) {
+            ret = TSK_ERR_NO_MEMORY;
+            goto out;
+        }
     }
 
-    n = (tsk_id_t) self->tree_sequence->num_samples;
-    for (i = 0; i < 2; i++) {
-        ret = kc_vectors_alloc(&vecs[i], n);
+    total = 0;
+    left = 0;
+
+    ret = tsk_tree_first(&trees[0]);
+    if (ret != TSK_TREE_OK) {
+        goto out;
+    }
+    ret = check_kc_distance_tree_inputs(&trees[0]);
+    if (ret != 0) {
+        goto out;
+    }
+    ret = tsk_diff_iter_next(
+        &diff_iters[0], &t0_left, &t0_right, &edges_out[0], &edges_in[0]);
+    tsk_bug_assert(ret == TSK_TREE_OK);
+    ret = update_kc_incremental(
+        &trees[0], &kcs[0], &edges_out[0], &edges_in[0], depths[0]);
+    if (ret != 0) {
+        goto out;
+    }
+    while ((ret = tsk_tree_next(&trees[1])) == TSK_TREE_OK) {
+        ret = check_kc_distance_tree_inputs(&trees[1]);
         if (ret != 0) {
             goto out;
         }
-        ret = fill_kc_vectors(trees[i], &vecs[i]);
+        ret = tsk_diff_iter_next(
+            &diff_iters[1], &t1_left, &t1_right, &edges_out[1], &edges_in[1]);
+        tsk_bug_assert(ret == TSK_TREE_OK);
+
+        ret = update_kc_incremental(
+            &trees[1], &kcs[1], &edges_out[1], &edges_in[1], depths[1]);
         if (ret != 0) {
             goto out;
         }
+        while (t0_right < t1_right) {
+            span = t0_right - left;
+            total += norm_kc_vectors(&kcs[0], &kcs[1], lambda_) * span;
+
+            left = t0_right;
+            ret = tsk_tree_next(&trees[0]);
+            tsk_bug_assert(ret == TSK_TREE_OK);
+            ret = check_kc_distance_tree_inputs(&trees[0]);
+            if (ret != 0) {
+                goto out;
+            }
+            ret = tsk_diff_iter_next(
+                &diff_iters[0], &t0_left, &t0_right, &edges_out[0], &edges_in[0]);
+            tsk_bug_assert(ret == TSK_TREE_OK);
+            ret = update_kc_incremental(
+                &trees[0], &kcs[0], &edges_out[0], &edges_in[0], depths[0]);
+            if (ret != 0) {
+                goto out;
+            }
+        }
+        span = t1_right - left;
+        left = t1_right;
+        total += norm_kc_vectors(&kcs[0], &kcs[1], lambda_) * span;
+    }
+    if (ret != 0) {
+        goto out;
     }
 
-    *result = norm_kc_vectors(&vecs[0], &vecs[1], lambda);
+    *result = total / self->tables->sequence_length;
 out:
     for (i = 0; i < 2; i++) {
-        kc_vectors_free(&vecs[i]);
+        tsk_tree_free(&trees[i]);
+        tsk_diff_iter_free(&diff_iters[i]);
+        kc_vectors_free(&kcs[i]);
+        tsk_safe_free(depths[i]);
     }
     return ret;
 }
 
+/*
+ * Divergence matrix
+ */
+
+typedef struct {
+    /* Note it's a waste storing the triply linked tree here, but the code
+     * is written on the assumption of 1-based trees and the algorithm is
+     * frighteningly subtle, so it doesn't seem worth messing with it
+     * unless we really need to save some memory */
+    tsk_id_t *parent;
+    tsk_id_t *child;
+    tsk_id_t *sib;
+    tsk_id_t *lambda;
+    tsk_id_t *pi;
+    tsk_id_t *tau;
+    tsk_id_t *beta;
+    tsk_id_t *alpha;
+} sv_tables_t;
+
 static int
-check_kc_distance_tree_sequence_inputs(
-    const tsk_treeseq_t *self, const tsk_treeseq_t *other)
+sv_tables_init(sv_tables_t *self, tsk_size_t n)
 {
     int ret = 0;
 
-    if (self->tables->sequence_length != other->tables->sequence_length) {
-        ret = TSK_ERR_SEQUENCE_LENGTH_MISMATCH;
-        goto out;
-    }
-
-    ret = check_kc_distance_samples_inputs(self, other);
-    if (ret != 0) {
+    self->parent = tsk_malloc(n * sizeof(*self->parent));
+    self->child = tsk_malloc(n * sizeof(*self->child));
+    self->sib = tsk_malloc(n * sizeof(*self->sib));
+    self->pi = tsk_malloc(n * sizeof(*self->pi));
+    self->lambda = tsk_malloc(n * sizeof(*self->lambda));
+    self->tau = tsk_malloc(n * sizeof(*self->tau));
+    self->beta = tsk_malloc(n * sizeof(*self->beta));
+    self->alpha = tsk_malloc(n * sizeof(*self->alpha));
+    if (self->parent == NULL || self->child == NULL || self->sib == NULL
+        || self->lambda == NULL || self->tau == NULL || self->beta == NULL
+        || self->alpha == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
         goto out;
     }
-
 out:
     return ret;
 }
 
+static int
+sv_tables_free(sv_tables_t *self)
+{
+    tsk_safe_free(self->parent);
+    tsk_safe_free(self->child);
+    tsk_safe_free(self->sib);
+    tsk_safe_free(self->lambda);
+    tsk_safe_free(self->pi);
+    tsk_safe_free(self->tau);
+    tsk_safe_free(self->beta);
+    tsk_safe_free(self->alpha);
+    return 0;
+}
 static void
-update_kc_pair_with_sample(const tsk_tree_t *self, kc_vectors *kc, tsk_id_t sample,
-    tsk_size_t *depths, double root_time)
+sv_tables_reset(sv_tables_t *self, tsk_tree_t *tree)
 {
-    tsk_id_t c, p, sib;
-    double time;
-    tsk_size_t depth;
-    double *times = self->tree_sequence->tables->nodes.time;
+    const tsk_size_t n = 1 + tree->num_nodes;
+    tsk_memset(self->parent, 0, n * sizeof(*self->parent));
+    tsk_memset(self->child, 0, n * sizeof(*self->child));
+    tsk_memset(self->sib, 0, n * sizeof(*self->sib));
+    tsk_memset(self->pi, 0, n * sizeof(*self->pi));
+    tsk_memset(self->lambda, 0, n * sizeof(*self->lambda));
+    tsk_memset(self->tau, 0, n * sizeof(*self->tau));
+    tsk_memset(self->beta, 0, n * sizeof(*self->beta));
+    tsk_memset(self->alpha, 0, n * sizeof(*self->alpha));
+}
 
-    c = sample;
-    for (p = self->parent[sample]; p != TSK_NULL; p = self->parent[p]) {
-        time = root_time - times[p];
-        depth = depths[p];
-        for (sib = self->left_child[p]; sib != TSK_NULL; sib = self->right_sib[sib]) {
-            if (sib != c) {
-                update_kc_vectors_all_pairs(self, kc, sample, sib, depth, time);
+static void
+sv_tables_convert_tree(sv_tables_t *self, tsk_tree_t *tree)
+{
+    const tsk_size_t n = 1 + tree->num_nodes;
+    const tsk_id_t *restrict tsk_parent = tree->parent;
+    tsk_id_t *restrict child = self->child;
+    tsk_id_t *restrict parent = self->parent;
+    tsk_id_t *restrict sib = self->sib;
+    tsk_size_t j;
+    tsk_id_t u, v;
+
+    for (j = 0; j < n - 1; j++) {
+        u = (tsk_id_t) j + 1;
+        v = tsk_parent[j] + 1;
+        sib[u] = child[v];
+        child[v] = u;
+        parent[u] = v;
+    }
+}
+
+#define LAMBDA 0
+
+static void
+sv_tables_build_index(sv_tables_t *self)
+{
+    const tsk_id_t *restrict child = self->child;
+    const tsk_id_t *restrict parent = self->parent;
+    const tsk_id_t *restrict sib = self->sib;
+    tsk_id_t *restrict lambda = self->lambda;
+    tsk_id_t *restrict pi = self->pi;
+    tsk_id_t *restrict tau = self->tau;
+    tsk_id_t *restrict beta = self->beta;
+    tsk_id_t *restrict alpha = self->alpha;
+    tsk_id_t a, n, p, h;
+
+    p = child[LAMBDA];
+    n = 0;
+    lambda[0] = -1;
+    while (p != LAMBDA) {
+        while (true) {
+            n++;
+            pi[p] = n;
+            tau[n] = LAMBDA;
+            lambda[n] = 1 + lambda[n >> 1];
+            if (child[p] != LAMBDA) {
+                p = child[p];
+            } else {
+                break;
+            }
+        }
+        beta[p] = n;
+        while (true) {
+            tau[beta[p]] = parent[p];
+            if (sib[p] != LAMBDA) {
+                p = sib[p];
+                break;
+            } else {
+                p = parent[p];
+                if (p != LAMBDA) {
+                    h = lambda[n & -pi[p]];
+                    beta[p] = ((n >> h) | 1) << h;
+                } else {
+                    break;
+                }
+            }
+        }
+    }
+
+    /* Begin the second traversal */
+    lambda[0] = lambda[n];
+    pi[LAMBDA] = 0;
+    beta[LAMBDA] = 0;
+    alpha[LAMBDA] = 0;
+    p = child[LAMBDA];
+    while (p != LAMBDA) {
+        while (true) {
+            a = alpha[parent[p]] | (beta[p] & -beta[p]);
+            alpha[p] = a;
+            if (child[p] != LAMBDA) {
+                p = child[p];
+            } else {
+                break;
+            }
+        }
+        while (true) {
+            if (sib[p] != LAMBDA) {
+                p = sib[p];
+                break;
+            } else {
+                p = parent[p];
+                if (p == LAMBDA) {
+                    break;
+                }
             }
         }
-        c = p;
     }
 }
 
+static void
+sv_tables_build(sv_tables_t *self, tsk_tree_t *tree)
+{
+    sv_tables_reset(self, tree);
+    sv_tables_convert_tree(self, tree);
+    sv_tables_build_index(self);
+}
+
+static tsk_id_t
+sv_tables_mrca_one_based(const sv_tables_t *self, tsk_id_t x, tsk_id_t y)
+{
+    const tsk_id_t *restrict lambda = self->lambda;
+    const tsk_id_t *restrict pi = self->pi;
+    const tsk_id_t *restrict tau = self->tau;
+    const tsk_id_t *restrict beta = self->beta;
+    const tsk_id_t *restrict alpha = self->alpha;
+    tsk_id_t h, k, xhat, yhat, ell, j, z;
+
+    if (beta[x] <= beta[y]) {
+        h = lambda[beta[y] & -beta[x]];
+    } else {
+        h = lambda[beta[x] & -beta[y]];
+    }
+    k = alpha[x] & alpha[y] & -(1 << h);
+    h = lambda[k & -k];
+    j = ((beta[x] >> h) | 1) << h;
+    if (j == beta[x]) {
+        xhat = x;
+    } else {
+        ell = lambda[alpha[x] & ((1 << h) - 1)];
+        xhat = tau[((beta[x] >> ell) | 1) << ell];
+    }
+    if (j == beta[y]) {
+        yhat = y;
+    } else {
+        ell = lambda[alpha[y] & ((1 << h) - 1)];
+        yhat = tau[((beta[y] >> ell) | 1) << ell];
+    }
+    if (pi[xhat] <= pi[yhat]) {
+        z = xhat;
+    } else {
+        z = yhat;
+    }
+    return z;
+}
+
+static tsk_id_t
+sv_tables_mrca(const sv_tables_t *self, tsk_id_t x, tsk_id_t y)
+{
+    /* Convert to 1-based indexes and back */
+    return sv_tables_mrca_one_based(self, x + 1, y + 1) - 1;
+}
+
+static int
+tsk_treeseq_check_node_bounds(
+    const tsk_treeseq_t *self, tsk_size_t num_nodes, const tsk_id_t *nodes)
+{
+    int ret = 0;
+    tsk_size_t j;
+    tsk_id_t u;
+    const tsk_id_t N = (tsk_id_t) self->tables->nodes.num_rows;
+
+    for (j = 0; j < num_nodes; j++) {
+        u = nodes[j];
+        if (u < 0 || u >= N) {
+            ret = TSK_ERR_NODE_OUT_OF_BOUNDS;
+            goto out;
+        }
+    }
+out:
+    return ret;
+}
+
 static int
-update_kc_subtree_state(
-    tsk_tree_t *t, kc_vectors *kc, tsk_id_t u, tsk_size_t *depths, double root_time)
+tsk_treeseq_divergence_matrix_branch(const tsk_treeseq_t *self, tsk_size_t num_samples,
+    const tsk_id_t *restrict samples, tsk_size_t num_windows,
+    const double *restrict windows, tsk_flags_t options, double *restrict result)
 {
-    int stack_top;
-    tsk_id_t v, c;
-    tsk_id_t *stack = NULL;
     int ret = 0;
+    tsk_tree_t tree;
+    const double *restrict nodes_time = self->tables->nodes.time;
+    const tsk_size_t n = num_samples;
+    tsk_size_t i, j, k;
+    tsk_id_t u, v, w, u_root, v_root;
+    double tu, tv, d, span, left, right, span_left, span_right;
+    double *restrict D;
+    sv_tables_t sv;
 
-    stack = tsk_malloc(tsk_tree_get_size_bound(t) * sizeof(*stack));
-    if (stack == NULL) {
-        ret = TSK_ERR_NO_MEMORY;
+    memset(&sv, 0, sizeof(sv));
+    ret = tsk_tree_init(&tree, self, 0);
+    if (ret != 0) {
+        goto out;
+    }
+    ret = sv_tables_init(&sv, self->tables->nodes.num_rows + 1);
+    if (ret != 0) {
         goto out;
     }
 
-    stack_top = 0;
-    stack[stack_top] = u;
-    while (stack_top >= 0) {
-        v = stack[stack_top];
-        stack_top--;
+    if (self->time_uncalibrated && !(options & TSK_STAT_ALLOW_TIME_UNCALIBRATED)) {
+        ret = TSK_ERR_TIME_UNCALIBRATED;
+        goto out;
+    }
 
-        if (tsk_tree_is_sample(t, v)) {
-            update_kc_pair_with_sample(t, kc, v, depths, root_time);
+    for (i = 0; i < num_windows; i++) {
+        left = windows[i];
+        right = windows[i + 1];
+        D = result + i * n * n;
+        ret = tsk_tree_seek(&tree, left, 0);
+        if (ret != 0) {
+            goto out;
         }
-        for (c = t->left_child[v]; c != TSK_NULL; c = t->right_sib[c]) {
-            if (depths[c] != 0) {
-                depths[c] = depths[v] + 1;
-                stack_top++;
-                stack[stack_top] = c;
+        while (tree.interval.left < right && tree.index != -1) {
+            span_left = TSK_MAX(tree.interval.left, left);
+            span_right = TSK_MIN(tree.interval.right, right);
+            span = span_right - span_left;
+            sv_tables_build(&sv, &tree);
+            for (j = 0; j < n; j++) {
+                u = samples[j];
+                for (k = j + 1; k < n; k++) {
+                    v = samples[k];
+                    w = sv_tables_mrca(&sv, u, v);
+                    if (w != TSK_NULL) {
+                        u_root = w;
+                        v_root = w;
+                    } else {
+                        /* Slow path - only happens for nodes in disconnected
+                         * subtrees in a tree with multiple roots */
+                        u_root = tsk_tree_get_node_root(&tree, u);
+                        v_root = tsk_tree_get_node_root(&tree, v);
+                    }
+                    tu = nodes_time[u_root] - nodes_time[u];
+                    tv = nodes_time[v_root] - nodes_time[v];
+                    d = (tu + tv) * span;
+                    D[j * n + k] += d;
+                }
+            }
+            ret = tsk_tree_next(&tree);
+            if (ret < 0) {
+                goto out;
             }
         }
     }
-
+    ret = 0;
 out:
-    tsk_safe_free(stack);
+    tsk_tree_free(&tree);
+    sv_tables_free(&sv);
     return ret;
 }
 
-static int
-update_kc_incremental(tsk_tree_t *self, kc_vectors *kc, tsk_edge_list_t *edges_out,
-    tsk_edge_list_t *edges_in, tsk_size_t *depths)
+static tsk_size_t
+count_mutations_on_path(tsk_id_t u, tsk_id_t v, const tsk_id_t *restrict parent,
+    const double *restrict time, const tsk_size_t *restrict mutations_per_node)
 {
-    int ret = 0;
-    tsk_edge_list_node_t *record;
-    tsk_edge_t *e;
-    tsk_id_t u;
-    double root_time, time;
-    const double *times = self->tree_sequence->tables->nodes.time;
-
-    /* Update state of detached subtrees */
-    for (record = edges_out->tail; record != NULL; record = record->prev) {
-        e = &record->edge;
-        u = e->child;
-        depths[u] = 0;
+    double tu, tv;
+    tsk_size_t count = 0;
 
-        if (self->parent[u] == TSK_NULL) {
-            root_time = times[tsk_tree_node_root(self, u)];
-            ret = update_kc_subtree_state(self, kc, u, depths, root_time);
-            if (ret != 0) {
-                goto out;
+    tu = time[u];
+    tv = time[v];
+    while (u != v) {
+        if (tu < tv) {
+            count += mutations_per_node[u];
+            u = parent[u];
+            if (u == TSK_NULL) {
+                break;
             }
+            tu = time[u];
+        } else {
+            count += mutations_per_node[v];
+            v = parent[v];
+            if (v == TSK_NULL) {
+                break;
+            }
+            tv = time[v];
         }
     }
-
-    /* Propagate state change down into reattached subtrees. */
-    for (record = edges_in->tail; record != NULL; record = record->prev) {
-        e = &record->edge;
-        u = e->child;
-
-        tsk_bug_assert(depths[e->child] == 0);
-        depths[u] = depths[e->parent] + 1;
-
-        root_time = times[tsk_tree_node_root(self, u)];
-        ret = update_kc_subtree_state(self, kc, u, depths, root_time);
-        if (ret != 0) {
-            goto out;
+    if (u != v) {
+        while (u != TSK_NULL) {
+            count += mutations_per_node[u];
+            u = parent[u];
         }
-
-        if (tsk_tree_is_sample(self, u)) {
-            time = tsk_tree_get_branch_length_unsafe(self, u);
-            update_kc_vectors_single_sample(self->tree_sequence, kc, u, time);
+        while (v != TSK_NULL) {
+            count += mutations_per_node[v];
+            v = parent[v];
         }
     }
-
-out:
-    return ret;
+    return count;
 }
 
-int
-tsk_treeseq_kc_distance(const tsk_treeseq_t *self, const tsk_treeseq_t *other,
-    double lambda_, double *result)
+static int
+tsk_treeseq_divergence_matrix_site(const tsk_treeseq_t *self, tsk_size_t num_samples,
+    const tsk_id_t *restrict samples, tsk_size_t num_windows,
+    const double *restrict windows, tsk_flags_t TSK_UNUSED(options),
+    double *restrict result)
 {
-    int i;
-    tsk_id_t n;
-    tsk_size_t num_nodes;
-    double left, span, total;
-    const tsk_treeseq_t *treeseqs[2] = { self, other };
-    tsk_tree_t trees[2];
-    kc_vectors kcs[2];
-    tsk_diff_iter_t diff_iters[2];
-    tsk_edge_list_t edges_out[2];
-    tsk_edge_list_t edges_in[2];
-    tsk_size_t *depths[2];
-    double t0_left, t0_right, t1_left, t1_right;
     int ret = 0;
+    tsk_tree_t tree;
+    const tsk_size_t n = num_samples;
+    const tsk_size_t num_nodes = self->tables->nodes.num_rows;
+    const double *restrict nodes_time = self->tables->nodes.time;
+    tsk_size_t i, j, k, tree_site, tree_mut;
+    tsk_site_t site;
+    tsk_mutation_t mut;
+    tsk_id_t u, v;
+    double left, right, span_left, span_right;
+    double *restrict D;
+    tsk_size_t *mutations_per_node = tsk_malloc(num_nodes * sizeof(*mutations_per_node));
 
-    for (i = 0; i < 2; i++) {
-        tsk_memset(&trees[i], 0, sizeof(trees[i]));
-        tsk_memset(&diff_iters[i], 0, sizeof(diff_iters[i]));
-        tsk_memset(&kcs[i], 0, sizeof(kcs[i]));
-        tsk_memset(&edges_out[i], 0, sizeof(edges_out[i]));
-        tsk_memset(&edges_in[i], 0, sizeof(edges_in[i]));
-        depths[i] = NULL;
-    }
-
-    ret = check_kc_distance_tree_sequence_inputs(self, other);
+    ret = tsk_tree_init(&tree, self, 0);
     if (ret != 0) {
         goto out;
     }
+    if (mutations_per_node == NULL) {
+        ret = TSK_ERR_NO_MEMORY;
+        goto out;
+    }
 
-    n = (tsk_id_t) self->num_samples;
-    for (i = 0; i < 2; i++) {
-        ret = tsk_tree_init(&trees[i], treeseqs[i], TSK_SAMPLE_LISTS);
-        if (ret != 0) {
-            goto out;
-        }
-        ret = tsk_diff_iter_init_from_ts(&diff_iters[i], treeseqs[i], false);
+    for (i = 0; i < num_windows; i++) {
+        left = windows[i];
+        right = windows[i + 1];
+        D = result + i * n * n;
+        ret = tsk_tree_seek(&tree, left, 0);
         if (ret != 0) {
             goto out;
         }
-        ret = kc_vectors_alloc(&kcs[i], n);
-        if (ret != 0) {
-            goto out;
+        while (tree.interval.left < right && tree.index != -1) {
+            span_left = TSK_MAX(tree.interval.left, left);
+            span_right = TSK_MIN(tree.interval.right, right);
+
+            /* NOTE: we could avoid this full memset across all nodes by doing
+             * the same loops again and decrementing at the end of the main
+             * tree-loop. It's probably not worth it though, because of the
+             * overwhelming O(n^2) below */
+            tsk_memset(mutations_per_node, 0, num_nodes * sizeof(*mutations_per_node));
+            for (tree_site = 0; tree_site < tree.sites_length; tree_site++) {
+                site = tree.sites[tree_site];
+                if (span_left <= site.position && site.position < span_right) {
+                    for (tree_mut = 0; tree_mut < site.mutations_length; tree_mut++) {
+                        mut = site.mutations[tree_mut];
+                        mutations_per_node[mut.node]++;
+                    }
+                }
+            }
+
+            for (j = 0; j < n; j++) {
+                u = samples[j];
+                for (k = j + 1; k < n; k++) {
+                    v = samples[k];
+                    D[j * n + k] += (double) count_mutations_on_path(
+                        u, v, tree.parent, nodes_time, mutations_per_node);
+                }
+            }
+            ret = tsk_tree_next(&tree);
+            if (ret < 0) {
+                goto out;
+            }
         }
-        num_nodes = tsk_treeseq_get_num_nodes(treeseqs[i]);
-        depths[i] = tsk_calloc(num_nodes, sizeof(*depths[i]));
-        if (depths[i] == NULL) {
-            ret = TSK_ERR_NO_MEMORY;
-            goto out;
+    }
+    ret = 0;
+out:
+    tsk_tree_free(&tree);
+    tsk_safe_free(mutations_per_node);
+    return ret;
+}
+
+static void
+fill_lower_triangle(
+    double *restrict result, const tsk_size_t n, const tsk_size_t num_windows)
+{
+    tsk_size_t i, j, k;
+    double *restrict D;
+
+    /* TODO there's probably a better striding pattern that could be used here */
+    for (i = 0; i < num_windows; i++) {
+        D = result + i * n * n;
+        for (j = 0; j < n; j++) {
+            for (k = j + 1; k < n; k++) {
+                D[k * n + j] = D[j * n + k];
+            }
         }
     }
+}
 
-    total = 0;
-    left = 0;
+int
+tsk_treeseq_divergence_matrix(const tsk_treeseq_t *self, tsk_size_t num_samples,
+    const tsk_id_t *samples_in, tsk_size_t num_windows, const double *windows,
+    tsk_flags_t options, double *result)
+{
+    int ret = 0;
+    const tsk_id_t *samples = self->samples;
+    tsk_size_t n = self->num_samples;
+    const double default_windows[] = { 0, self->tables->sequence_length };
+    bool stat_site = !!(options & TSK_STAT_SITE);
+    bool stat_branch = !!(options & TSK_STAT_BRANCH);
+    bool stat_node = !!(options & TSK_STAT_NODE);
 
-    ret = tsk_tree_first(&trees[0]);
-    if (ret != TSK_TREE_OK) {
+    if (stat_node) {
+        ret = TSK_ERR_UNSUPPORTED_STAT_MODE;
         goto out;
     }
-    ret = check_kc_distance_tree_inputs(&trees[0]);
-    if (ret != 0) {
+    /* If no mode is specified, we default to site mode */
+    if (!(stat_site || stat_branch)) {
+        stat_site = true;
+    }
+    /* It's an error to specify more than one mode */
+    if (stat_site + stat_branch > 1) {
+        ret = TSK_ERR_MULTIPLE_STAT_MODES;
         goto out;
     }
-    ret = tsk_diff_iter_next(
-        &diff_iters[0], &t0_left, &t0_right, &edges_out[0], &edges_in[0]);
-    tsk_bug_assert(ret == TSK_TREE_OK);
-    ret = update_kc_incremental(
-        &trees[0], &kcs[0], &edges_out[0], &edges_in[0], depths[0]);
-    if (ret != 0) {
+
+    if (options & TSK_STAT_POLARISED) {
+        ret = TSK_ERR_STAT_POLARISED_UNSUPPORTED;
         goto out;
     }
-    while ((ret = tsk_tree_next(&trees[1])) == TSK_TREE_OK) {
-        ret = check_kc_distance_tree_inputs(&trees[1]);
+    if (options & TSK_STAT_SPAN_NORMALISE) {
+        ret = TSK_ERR_STAT_SPAN_NORMALISE_UNSUPPORTED;
+        goto out;
+    }
+
+    if (windows == NULL) {
+        num_windows = 1;
+        windows = default_windows;
+    } else {
+        ret = tsk_treeseq_check_windows(self, num_windows, windows, 0);
         if (ret != 0) {
             goto out;
         }
-        ret = tsk_diff_iter_next(
-            &diff_iters[1], &t1_left, &t1_right, &edges_out[1], &edges_in[1]);
-        tsk_bug_assert(ret == TSK_TREE_OK);
+    }
 
-        ret = update_kc_incremental(
-            &trees[1], &kcs[1], &edges_out[1], &edges_in[1], depths[1]);
+    if (samples_in != NULL) {
+        samples = samples_in;
+        n = num_samples;
+        ret = tsk_treeseq_check_node_bounds(self, n, samples);
         if (ret != 0) {
             goto out;
         }
-        while (t0_right < t1_right) {
-            span = t0_right - left;
-            total += norm_kc_vectors(&kcs[0], &kcs[1], lambda_) * span;
+    }
 
-            left = t0_right;
-            ret = tsk_tree_next(&trees[0]);
-            tsk_bug_assert(ret == TSK_TREE_OK);
-            ret = check_kc_distance_tree_inputs(&trees[0]);
-            if (ret != 0) {
-                goto out;
-            }
-            ret = tsk_diff_iter_next(
-                &diff_iters[0], &t0_left, &t0_right, &edges_out[0], &edges_in[0]);
-            tsk_bug_assert(ret == TSK_TREE_OK);
-            ret = update_kc_incremental(
-                &trees[0], &kcs[0], &edges_out[0], &edges_in[0], depths[0]);
-            if (ret != 0) {
-                goto out;
-            }
-        }
-        span = t1_right - left;
-        left = t1_right;
-        total += norm_kc_vectors(&kcs[0], &kcs[1], lambda_) * span;
+    tsk_memset(result, 0, num_windows * n * n * sizeof(*result));
+
+    if (stat_branch) {
+        ret = tsk_treeseq_divergence_matrix_branch(
+            self, n, samples, num_windows, windows, options, result);
+    } else {
+        tsk_bug_assert(stat_site);
+        ret = tsk_treeseq_divergence_matrix_site(
+            self, n, samples, num_windows, windows, options, result);
     }
     if (ret != 0) {
         goto out;
     }
+    fill_lower_triangle(result, n, num_windows);
 
-    *result = total / self->tables->sequence_length;
 out:
-    for (i = 0; i < 2; i++) {
-        tsk_tree_free(&trees[i]);
-        tsk_diff_iter_free(&diff_iters[i]);
-        kc_vectors_free(&kcs[i]);
-        tsk_safe_free(depths[i]);
-    }
     return ret;
 }
diff --git a/tskit/trees.h b/tskit/trees.h
index efe9980..e3129e4 100644
--- a/tskit/trees.h
+++ b/tskit/trees.h
@@ -919,6 +919,15 @@ typedef int general_stat_func_t(tsk_size_t state_dim, const double *state,
 int tsk_treeseq_general_stat(const tsk_treeseq_t *self, tsk_size_t K, const double *W,
     tsk_size_t M, general_stat_func_t *f, void *f_params, tsk_size_t num_windows,
     const double *windows, tsk_flags_t options, double *result);
+// TODO: expose this externally?
+/* int tsk_treeseq_two_locus_general_stat(const tsk_treeseq_t *self, */
+/*     tsk_size_t num_sample_sets, const tsk_size_t *sample_set_sizes, */
+/*     const tsk_id_t *sample_sets, tsk_size_t result_dim, const tsk_id_t *set_indexes,
+ */
+/*     general_stat_func_t *f, norm_func_t *norm_f, tsk_size_t num_left_windows, */
+/*     const double *left_windows, tsk_size_t num_right_windows, */
+/*     const double *right_windows, tsk_flags_t options, tsk_size_t num_result, */
+/*     double *result); */
 
 /* One way weighted stats */
 
@@ -943,6 +952,17 @@ int tsk_treeseq_trait_linear_model(const tsk_treeseq_t *self, tsk_size_t num_wei
     const double *weights, tsk_size_t num_covariates, const double *covariates,
     tsk_size_t num_windows, const double *windows, tsk_flags_t options, double *result);
 
+/* Two way weighted stats with covariates */
+
+typedef int two_way_weighted_method(const tsk_treeseq_t *self, tsk_size_t num_weights,
+    const double *weights, tsk_size_t num_index_tuples, const tsk_id_t *index_tuples,
+    tsk_size_t num_windows, const double *windows, double *result, tsk_flags_t options);
+
+int tsk_treeseq_genetic_relatedness_weighted(const tsk_treeseq_t *self,
+    tsk_size_t num_weights, const double *weights, tsk_size_t num_index_tuples,
+    const tsk_id_t *index_tuples, tsk_size_t num_windows, const double *windows,
+    double *result, tsk_flags_t options);
+
 /* One way sample set stats */
 
 typedef int one_way_sample_stat_method(const tsk_treeseq_t *self,
@@ -987,6 +1007,42 @@ int tsk_treeseq_genetic_relatedness(const tsk_treeseq_t *self,
     const tsk_id_t *index_tuples, tsk_size_t num_windows, const double *windows,
     tsk_flags_t options, double *result);
 
+int tsk_treeseq_D(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result);
+int tsk_treeseq_D2(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result);
+int tsk_treeseq_r2(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result);
+int tsk_treeseq_D_prime(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result);
+int tsk_treeseq_r(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result);
+int tsk_treeseq_Dz(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result);
+int tsk_treeseq_pi2(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
+    const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
+    tsk_size_t num_left_windows, const double *left_windows,
+    tsk_size_t num_right_windows, const double *right_windows, tsk_flags_t options,
+    tsk_size_t *result_size, double **result);
+
 /* Three way sample set stats */
 int tsk_treeseq_Y3(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
     const tsk_size_t *sample_set_sizes, const tsk_id_t *sample_sets,
@@ -1003,6 +1059,10 @@ int tsk_treeseq_f4(const tsk_treeseq_t *self, tsk_size_t num_sample_sets,
     tsk_size_t num_index_tuples, const tsk_id_t *index_tuples, tsk_size_t num_windows,
     const double *windows, tsk_flags_t options, double *result);
 
+int tsk_treeseq_divergence_matrix(const tsk_treeseq_t *self, tsk_size_t num_samples,
+    const tsk_id_t *samples, tsk_size_t num_windows, const double *windows,
+    tsk_flags_t options, double *result);
+
 /****************************************************************************/
 /* Tree */
 /****************************************************************************/
