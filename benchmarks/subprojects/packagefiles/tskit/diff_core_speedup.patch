diff --git a/tskit/core.c b/tskit/core.c
index 6e20b31..acd3a98 100644
--- a/tskit/core.c
+++ b/tskit/core.c
@@ -1258,20 +1258,20 @@ tsk_bit_array_contains_id(const tsk_bit_array_t *self, const tsk_id_t node)
 tsk_size_t
 tsk_bit_array_count(const tsk_bit_array_t *self)
 {
-    /* Utilizes one iteration per set bit. There are implementations that use 15
-     * operations for 32 bit integers, see
-     * https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSet64
-     * However, this implementation might be more efficient across many architectures.
+    /* Utilizes 12 operations per bit array. NB this only works on 32 bit integers.
+     * Taken from:
+     *   https://graphics.stanford.edu/~seander/bithacks.html#CountBitsSetParallel
+     * There's a nice breakdown of this algorithm here:
+     *   https://stackoverflow.com/a/109025
+     * Could probably do better with explicit SIMD (instead of SWAR), but not as
+     * portable: https://arxiv.org/pdf/1611.07612.pdf
      */
     tsk_bit_array_value_t tmp;
-    tsk_size_t i, count = 0;
-
-    for (i = 0; i < self->size; i++) {
-        tmp = self->data[i];
-        while (tmp) {
-            tmp &= (tmp - 1);
-            count++;
-        }
+    tsk_size_t count = 0;
+    for (tsk_size_t i = 0; i < self->size; i++) {
+        tmp = self->data[i] - ((self->data[i] >> 1) & 0x55555555);
+        tmp = (tmp & 0x33333333) + ((tmp >> 2) & 0x33333333);
+        count += (((tmp + (tmp >> 4)) & 0xF0F0F0F) * 0x1010101) >> 24;
     }
     return count;
 }
